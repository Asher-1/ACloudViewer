ARG CLOUDVIEWER_VERSION
ARG DEPENDENCY_IMAGE_NAME
ARG CUDA_VERSION
ARG UBUNTU_VERSION
FROM ${DEPENDENCY_IMAGE_NAME}:${CLOUDVIEWER_VERSION}-ubuntu${UBUNTU_VERSION}-cuda${CUDA_VERSION}
LABEL maintainer="AliceVision Team ludahai19@163.com"

ARG PACKAGE
ARG BUILD_GUI
ARG BUILD_WHEEL
ARG PYTHON_VERSION
ARG BUILD_CUDA_MODULE
ARG BUILD_SHARED_LIBS
ARG BUILD_PYTORCH_OPS
ARG BUILD_TENSORFLOW_OPS

# Env vars for the nvidia-container-runtime.
ENV NVIDIA_VISIBLE_DEVICES=all
ENV NVIDIA_DRIVER_CAPABILITIES=all
ENV PACKAGE=${PACKAGE}
ENV BUILD_SHARED_LIBS=${BUILD_SHARED_LIBS}
ENV BUILD_CUDA_MODULE=${BUILD_CUDA_MODULE}
ENV BUILD_GUI=${BUILD_GUI}
ENV BUILD_WHEEL=${BUILD_WHEEL}
ENV PYTHON_VERSION=${PYTHON_VERSION}
ENV BUILD_PYTORCH_OPS=${BUILD_PYTORCH_OPS}
ENV BUILD_TENSORFLOW_OPS=${BUILD_TENSORFLOW_OPS}

# pyenv
# The pyenv python paths are used during docker run, in this way docker run
# does not need to activate the environment again.
# The soft link from the python patch level version to the python mino version
# ensures python wheel commands (i.e. cloudViewer) are in PATH, since we don't know
# which patch level pyenv will install (latest).
ENV PIP_DEFAULT_TIMEOUT=1000
ENV PIP_RETRIES=5
ENV PIP_TIMEOUT=1000
ENV PYENV_ROOT=/root/.pyenv
ENV PATH="$PYENV_ROOT/shims:$PYENV_ROOT/bin:$PYENV_ROOT/versions/$PYTHON_VERSION/bin:$PATH"
RUN curl https://pyenv.run | bash \
        && pyenv update \
        && pyenv install $PYTHON_VERSION \
        && pyenv global $PYTHON_VERSION \
        && pyenv rehash \
        && ln -s $PYENV_ROOT/versions/${PYTHON_VERSION}* $PYENV_ROOT/versions/${PYTHON_VERSION};
RUN python --version && pip --version

SHELL ["/bin/bash", "-o", "pipefail", "-c"]

ENV CMAKE_VERSION=cmake-3.29.2-linux-x86_64
ENV PATH=/opt/${CMAKE_VERSION}/bin:${PATH}
RUN CMAKE_VERSION_NUMBERS=$(echo "${CMAKE_VERSION}" | cut -d"-" -f2) \
 && wget -q https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION_NUMBERS}/${CMAKE_VERSION}.tar.gz \
 && tar -C /opt -xf ${CMAKE_VERSION}.tar.gz \
 && cmake --version

ENV ACloudViewer_DEV=/root \
    ACloudViewer_BUILD=/root/ACloudViewer/build \
    ACloudViewer_INSTALL=/root/install

ENV CLOUDVIEWER_ML_ROOT=/root/CloudViewer-ML
RUN git clone --depth 1 https://github.com/Asher-1/CloudViewer-ML.git -b torch271 ${CLOUDVIEWER_ML_ROOT}

# Install Rust (required for building some Python packages like y_py) only for Python 3.13+
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y \
    && . "$HOME/.cargo/env" \
    && echo 'source $HOME/.cargo/env' >> ~/.bashrc
ENV PATH="/root/.cargo/bin:${PATH}"

COPY . ${ACloudViewer_DEV}/ACloudViewer
WORKDIR ${ACloudViewer_DEV}/ACloudViewer

RUN mkdir -p ${ACloudViewer_INSTALL}

RUN ./docker/scripts/configure_pip_timeout.sh

# Build ACloudViewer app installer
RUN if [ "${BUILD_GUI}" = "ON" ]; then                                      \
        echo "Start Build ACloudViewer apps installer..." &&                \
        rm -rf ${ACloudViewer_BUILD}/* &&                                   \
        ./docker/build_gui_app.sh ${PYTHON_VERSION} "OFF";                  \
    fi

RUN if [ "${BUILD_WHEEL}" = "ON" ]; then                                    \
        echo "Build cloudviewer wheel for ${PYTHON_VERSION}..." &&          \
        rm -rf ${ACloudViewer_BUILD}/* &&                                   \
        ./docker/build_cloudviewer_whl.sh ${PYTHON_VERSION};                \
    fi

WORKDIR ${ACloudViewer_DEV}/ACloudViewer
