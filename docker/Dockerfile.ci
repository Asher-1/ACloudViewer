# FROM must be called before other ARGS except for ARG BASE_IMAGE
ARG BASE_IMAGE
FROM ${BASE_IMAGE}

# For bash-specific commands
SHELL ["/bin/bash", "-c"]

# Required build args, should be specified in docker_build.sh
ARG DEVELOPER_BUILD
ARG CCACHE_TAR_NAME
ARG CMAKE_VERSION
ARG CCACHE_VERSION
ARG PYTHON_VERSION
ARG BUILD_SHARED_LIBS
ARG BUILD_CUDA_MODULE
ARG BUILD_TENSORFLOW_OPS
ARG BUILD_PYTORCH_OPS
ARG PACKAGE
ARG QT_BASE_DIR
ARG CI

RUN if [ -z "${DEVELOPER_BUILD}"      ]; then echo "Error: ARG DEVELOPER_BUILD      not specified."; exit 1; fi \
 && if [ -z "${CCACHE_TAR_NAME}"      ]; then echo "Error: ARG CCACHE_TAR_NAME      not specified."; exit 1; fi \
 && if [ -z "${CMAKE_VERSION}"        ]; then echo "Error: ARG CMAKE_VERSION        not specified."; exit 1; fi \
 && if [ -z "${CCACHE_VERSION}"       ]; then echo "Error: ARG CCACHE_VERSION       not specified."; exit 1; fi \
 && if [ -z "${PYTHON_VERSION}"       ]; then echo "Error: ARG PYTHON_VERSION       not specified."; exit 1; fi \
 && if [ -z "${BUILD_SHARED_LIBS}"    ]; then echo "Error: ARG BUILD_SHARED_LIBS    not specified."; exit 1; fi \
 && if [ -z "${BUILD_CUDA_MODULE}"    ]; then echo "Error: ARG BUILD_CUDA_MODULE    not specified."; exit 1; fi \
 && if [ -z "${BUILD_TENSORFLOW_OPS}" ]; then echo "Error: ARG BUILD_TENSORFLOW_OPS not specified."; exit 1; fi \
 && if [ -z "${BUILD_PYTORCH_OPS}"    ]; then echo "Error: ARG BUILD_PYTORCH_OPS    not specified."; exit 1; fi \
 && if [ -z "${PACKAGE}"              ]; then echo "Error: ARG PACKAGE              not specified."; exit 1; fi 

# Fix Nvidia repo key rotation issue
# https://forums.developer.nvidia.com/t/notice-cuda-linux-repository-key-rotation/212771
# https://forums.developer.nvidia.com/t/18-04-cuda-docker-image-is-broken/212892/10
# https://code.visualstudio.com/remote/advancedcontainers/reduce-docker-warnings#:~:text=Warning%3A%20apt%2Dkey%20output%20should,not%20running%20from%20a%20terminal.
RUN if [ "${BUILD_CUDA_MODULE}" = "ON" ]; then \
        export APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn; \
        apt-key del 7fa2af80; \
        apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/3bf863cc.pub; \
        apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/7fa2af80.pub; \
    fi

# Forward all ARG to ENV
# ci_utils.sh may require these environment variables
ENV DEVELOPER_BUILD=${DEVELOPER_BUILD}
ENV CCACHE_TAR_NAME=${CCACHE_TAR_NAME}
ENV CMAKE_VERSION=${CMAKE_VERSION}
ENV CCACHE_VERSION=${CCACHE_VERSION}
ENV PYTHON_VERSION=${PYTHON_VERSION}
ENV BUILD_SHARED_LIBS=OFF
ENV BUILD_CUDA_MODULE=${BUILD_CUDA_MODULE}
ENV BUILD_TENSORFLOW_OPS=${BUILD_TENSORFLOW_OPS}
ENV BUILD_PYTORCH_OPS=${BUILD_PYTORCH_OPS}
ENV PACKAGE=${PACKAGE}
ENV QT_BASE_DIR=${QT_BASE_DIR}

# Prevent interactive inputs when installing packages
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=America/Los_Angeles
ENV SUDO=command
ENV VTK_VERSION=9.3.1
ENV PCL_VERSION=1.14.1

# Env vars for the nvidia-container-runtime.
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES all

# Update apt and install libs needed by Qt
RUN apt-get clean && apt-get update --fix-missing -y \
    && apt-get install apt-utils software-properties-common tzdata --fix-missing -y \
    && apt-key adv --fetch-keys https://apt.kitware.com/keys/kitware-archive-latest.asc \
    && apt-add-repository --yes "deb https://apt.kitware.com/ubuntu/ $(lsb_release -c --short) main" \
    && apt-get update --fix-missing -y \
    && apt-get install --fix-missing -yq --no-install-recommends \
        build-essential \
        git  \
        cmake \
        wget \
        curl \
        vim \
        tree \
        apt-file \
        net-tools \
        mesa-utils \
        # for others
        zlib1g \
        zlib1g-dev \
        libssl-dev \
        libbz2-dev \
        libreadline-dev \
        libsqlite3-dev \
        libncursesw5-dev \
        libcurl4-openssl-dev \
        # for opencv
        libavcodec-dev \
        libavformat-dev \
        libavutil-dev \
        libswscale-dev \
        libjpeg-dev \
        libpng-dev \
        libtiff-dev \
        libhdf5-dev \
        # for colmap
        libatlas-base-dev \
        # for package
        zip \
        unzip \
        locate \
        automake \
        xorg-dev \
        libxi-dev \
        openmpi-bin \
        openmpi-common \
        gfortran \
        ninja-build \
        libgtest-dev \
        libusb-dev \
        freeglut3-dev \
        pkg-config \
        libpcap-dev \
        clang-format \
        graphviz \
        nasm \
        flex \
        fontconfig \
        # for pcl
        libopenni-dev \
        libopenni2-dev \
        libjsoncpp-dev \
        # libgdal-dev \
        libcgal-dev \
        libusb-1.0-0-dev \
        libeigen3-dev \
        libboost-all-dev \
        libglew-dev \
        'libqhull*' \
        libqhull-dev \
        libflann1.9 \
        libflann-dev \
        # for QT
        libxcb-xkb1 \
        libxcb-shape0 \
        libxcb-randr0 \
        libxcb-icccm4 \
        libxcb-image0 \
        libxcb-keysyms1 \
        libxcb-xinerama0 \
        libxkbcommon-x11-0 \
        libxcb-render-util0

# Install Qt5
RUN apt-get -y update && \
    if [ "$(lsb_release -c --short)" = "jammy" ]; then \
        apt-get install -qy \
          libqt5svg5-dev libqt5opengl5-dev qtbase5-dev qttools5-dev qttools5-dev-tools qml-module-qtquick* \
          libqt5websockets5-dev libqt5xmlpatterns5-dev libqt5x11extras5-dev qt5-image-formats-plugins \
          qttranslations5-l10n qtdeclarative5-dev qtdeclarative5-dev-tools libqt5quickcontrols2-5 libqt5networkauth5-dev; \
    else \
        add-apt-repository ppa:beineri/opt-qt-5.15.2-$(lsb_release -c --short) -y; \
        apt-get -y update; \
        apt-get -y install qt515base qt515imageformats qt515declarative qt515quickcontrols2 qt515svg qt515tools \
            qt515translations qt515websockets qt515x11extras qt515xmlpatterns qt515networkauth-no-lgpl; \
    fi && \
    ldconfig && rm -rf /var/lib/apt/lists/*

CMD ["/bin/bash", "-c", "source /root/.bashrc && exec bash"]
RUN echo "QT_BASE_DIR=${QT_BASE_DIR}"
ENV QT_BASE_DIR=${QT_BASE_DIR} \
    QT_ROOT=${QT_BASE_DIR} \
    QTDIR=${QT_BASE_DIR} \
    QT_DIR=${QT_BASE_DIR} \
    PATH=${QT_BASE_DIR}/bin:$PATH \
    LD_LIBRARY_PATH=${QT_BASE_DIR}/lib:$LD_LIBRARY_PATH \
    PKG_CONFIG_PATH=${QT_BASE_DIR}/lib/pkgconfig:$PKG_CONFIG_PATH

SHELL ["/bin/bash", "-o", "pipefail", "-c"]

 # Miniconda or Intel conda
# The **/cloudViewer/bin paths are used during docker run, in this way docker run
# does not need to activate the environment again.
ENV PATH="/root/miniconda3/bin:${PATH}"
ENV PATH="/opt/intel/oneapi/intelpython/latest/bin:${PATH}"
ENV PATH="/opt/intel/oneapi/intelpython/latest/envs/cloudViewer/bin:${PATH}"
RUN wget -q https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh \
 && bash Miniconda3-latest-Linux-x86_64.sh -b \
 && rm Miniconda3-latest-Linux-x86_64.sh \
 && conda --version

# deploy package installer
WORKDIR /root
RUN wget https://raw.githubusercontent.com/Asher-1/CloudViewerUpdate/main/tools/QtIFW-4.6.1-linux-amd.zip -O "/root/QtIFW-4.6.1-linux-amd.zip"
RUN unzip QtIFW-4.6.1-linux-amd.zip && rm -rf QtIFW-4.6.1-linux-amd.zip
ENV PATH="/root/QtIFW-4.6.1-linux-amd/bin:$PATH"

# Checkout CloudViewer-ML main branch
# TODO: We may add support for local CloudViewer-ML repo or pinned ML repo tag
ENV ACloudViewer_DEV=/root \
    ACloudViewer_BUILD=/root/ACloudViewer/build \
    ACloudViewer_INSTALL=/root/install

ENV PATH="/root/miniconda3/bin:$PATH" \
    CONDA_EXE="/root/miniconda3/bin/conda"

RUN if [ -n "$CONDA_EXE" ]; then \
        CONDA_ROOT=$(dirname $(dirname "$CONDA_EXE")); \
    elif [ -n "$CONDA_PREFIX" ]; then \
        CONDA_ROOT=$(dirname "$CONDA_PREFIX"); \
    else \
        echo "Failed to find Miniconda3 install path..."; \
        exit 1; \
    fi && \
    echo "CONDA_ROOT is set to: $CONDA_ROOT" && \
    source "$CONDA_ROOT/etc/profile.d/conda.sh" 

# ACloudViewer repo
# Always keep /root/ACloudViewer as the WORKDIR
COPY . ${ACloudViewer_DEV}/ACloudViewer
WORKDIR ${ACloudViewer_DEV}/ACloudViewer

# ACloudViewer C++ dependencies
RUN ./util/install_deps_ubuntu.sh assume-yes

# ACloudViewer PCL+VTK dependencies
# Install metslib for pcl
WORKDIR /opt
RUN wget https://www.coin-or.org/download/source/metslib/metslib-0.5.3.tgz -O "/opt/metslib-0.5.3.tgz"
RUN tar -xvf metslib-0.5.3.tgz && \
    cd metslib-0.5.3 && \
    sh ./configure && \
    make && \
    make install \
    && ldconfig \
    && rm -rf /opt/metslib-0.5.3 \
    && rm -rf /opt/metslib-0.5.3.tgz

# Install laszip
WORKDIR /opt
RUN wget https://raw.githubusercontent.com/Asher-1/CloudViewerUpdate/main/tools/laszip-src-3.4.3.tar.gz -O "/opt/laszip-src-3.4.3.tar.gz"
RUN tar -xvf laszip-src-3.4.3.tar.gz && \
    cd laszip-src-3.4.3 && \
    mkdir -p build && cd build && \
    cmake .. && \
    make "-j$(nproc)" && \
    make install "-j$(nproc)" \
    && ldconfig \
    && rm -rf /opt/laszip-src-3.4.3 \
    && rm -rf /opt/laszip-src-3.4.3.zip

# Install xerces-c
WORKDIR /opt
RUN https://archive.apache.org/dist/xerces/c/3/sources/xerces-c-3.2.3.zip -O "/opt/xerces-c-3.2.3.zip"
RUN unzip xerces-c-3.2.3.zip \
    && cd ./xerces-c-3.2.3 \
    && chmod +x configure \
    && ./configure --prefix=/usr \
    && make \
    && make install \
    && make clean \
    && rm -rf /opt/xerces-c-3.2.3 \
    && rm -rf /opt/xerces-c-3.2.3.zip

# Install vtk
WORKDIR /opt
RUN https://vtk.org/files/release/9.3/VTK-${VTK_VERSION}.tar.gz -O "/opt/VTK-${VTK_VERSION}.tar.gz"
RUN tar -zxvf VTK-${VTK_VERSION}.tar.gz && \
    cd VTK-${VTK_VERSION} && \
    mkdir -p build && cd build && \
    cmake   -DCMAKE_BUILD_TYPE=RELEASE \
            -DVTK_GROUP_ENABLE_Qt=YES \
            -DVTK_MODULE_ENABLE_VTK_GUISupportQt=YES \
            -DVTK_MODULE_ENABLE_VTK_GUISupportQtQuick=YES \
            -DVTK_MODULE_ENABLE_VTK_GUISupportQtSQL=YES \
            -DVTK_MODULE_ENABLE_VTK_RenderingQt=YES \
            -DVTK_MODULE_ENABLE_VTK_ViewsQt=YES \
            -DVTK_QT_VERSION:STRING=5 \
            -DBUILD_SHARED_LIBS:BOOL=ON \
            -DQT_QMAKE_EXECUTABLE:PATH=${QT_DIR}/bin/qmake \
            -DCMAKE_PREFIX_PATH:PATH=${QT_DIR}/lib/cmake .. && \
    make "-j$(nproc)" && \
    make install "-j$(nproc)" && ldconfig && \
    rm -rf /opt/VTK-${VTK_VERSION} /opt/VTK-${VTK_VERSION}.tar.gz

# Install pcl
WORKDIR /opt
RUN wget https://github.com/PointCloudLibrary/pcl/releases/download/pcl-${PCL_VERSION}/source.zip -O "/opt/pcl-${PCL_VERSION}.zip"
RUN unzip pcl-${PCL_VERSION}.zip && \
    cd pcl && \
    mkdir -p build && cd build && \
    cmake   -DCMAKE_BUILD_TYPE=RELEASE \
            -DBUILD_GPU=OFF \
            -DBUILD_apps=OFF \
            -DBUILD_examples=OFF \
            -DBUILD_surface_on_nurbs=ON \
            -DQT_QMAKE_EXECUTABLE:PATH=${QT_DIR}/bin/qmake \
            -DCMAKE_PREFIX_PATH:PATH=${QT_DIR}/lib/cmake .. && \
    make "-j$(nproc)" && \
    make install "-j$(nproc)" && ldconfig && \
    rm -rf /opt/pcl /opt/pcl-${PCL_VERSION}.zip

# save disk space
RUN rm -rf /var/lib/apt/lists/*

RUN mkdir -p ${ACloudViewer_INSTALL}

# Build ACloudViewer app installer
RUN echo "Start Build ACloudViewer apps installer..."                           \
    && rm -rf ${ACloudViewer_BUILD}/*                                           \
    && ./docker/build_gui_app.sh ${PYTHON_VERSION} ${BUILD_CUDA_MODULE}         \
    && rm -rf ${ACloudViewer_BUILD}/*
WORKDIR ${ACloudViewer_DEV}/ACloudViewer

RUN echo "Docker build done."
