# FROM must be called before other ARGS except for ARG BASE_IMAGE
ARG BASE_IMAGE
FROM ${BASE_IMAGE}

# For bash-specific commands
SHELL ["/bin/bash", "-c"]

# Required build args, should be specified in docker_build.sh
ARG DEVELOPER_BUILD
ARG CCACHE_TAR_NAME
ARG CMAKE_VERSION
ARG CCACHE_VERSION
ARG PYTHON_VERSION
ARG BUILD_SHARED_LIBS
ARG BUILD_CUDA_MODULE
ARG BUILD_TENSORFLOW_OPS
ARG BUILD_PYTORCH_OPS
ARG PACKAGE
ARG BUILD_SYCL_MODULE
ARG CI

RUN if [ -z "${DEVELOPER_BUILD}"      ]; then echo "Error: ARG DEVELOPER_BUILD      not specified."; exit 1; fi \
 && if [ -z "${CCACHE_TAR_NAME}"      ]; then echo "Error: ARG CCACHE_TAR_NAME      not specified."; exit 1; fi \
 && if [ -z "${CMAKE_VERSION}"        ]; then echo "Error: ARG CMAKE_VERSION        not specified."; exit 1; fi \
 && if [ -z "${CCACHE_VERSION}"       ]; then echo "Error: ARG CCACHE_VERSION       not specified."; exit 1; fi \
 && if [ -z "${PYTHON_VERSION}"       ]; then echo "Error: ARG PYTHON_VERSION       not specified."; exit 1; fi \
 && if [ -z "${BUILD_SHARED_LIBS}"    ]; then echo "Error: ARG BUILD_SHARED_LIBS    not specified."; exit 1; fi \
 && if [ -z "${BUILD_CUDA_MODULE}"    ]; then echo "Error: ARG BUILD_CUDA_MODULE    not specified."; exit 1; fi \
 && if [ -z "${BUILD_TENSORFLOW_OPS}" ]; then echo "Error: ARG BUILD_TENSORFLOW_OPS not specified."; exit 1; fi \
 && if [ -z "${BUILD_PYTORCH_OPS}"    ]; then echo "Error: ARG BUILD_PYTORCH_OPS    not specified."; exit 1; fi \
 && if [ -z "${PACKAGE}"              ]; then echo "Error: ARG PACKAGE              not specified."; exit 1; fi 

# Fix Nvidia repo key rotation issue
# https://forums.developer.nvidia.com/t/notice-cuda-linux-repository-key-rotation/212771
# https://forums.developer.nvidia.com/t/18-04-cuda-docker-image-is-broken/212892/10
# https://code.visualstudio.com/remote/advancedcontainers/reduce-docker-warnings#:~:text=Warning%3A%20apt%2Dkey%20output%20should,not%20running%20from%20a%20terminal.
RUN if [ "${BUILD_CUDA_MODULE}" = "ON" ]; then \
        export APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn; \
        apt-key del 7fa2af80; \
        apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/3bf863cc.pub; \
        apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/7fa2af80.pub; \
    fi

# Forward all ARG to ENV
# ci_utils.sh may require these environment variables
ENV DEVELOPER_BUILD=${DEVELOPER_BUILD}
ENV CCACHE_TAR_NAME=${CCACHE_TAR_NAME}
ENV CMAKE_VERSION=${CMAKE_VERSION}
ENV CCACHE_VERSION=${CCACHE_VERSION}
ENV PYTHON_VERSION=${PYTHON_VERSION}
ENV BUILD_SHARED_LIBS=OFF
ENV BUILD_CUDA_MODULE=${BUILD_CUDA_MODULE}
ENV BUILD_TENSORFLOW_OPS=${BUILD_TENSORFLOW_OPS}
ENV BUILD_PYTORCH_OPS=${BUILD_PYTORCH_OPS}
ENV PACKAGE=${PACKAGE}

# Prevent interactive inputs when installing packages
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=America/Los_Angeles
ENV SUDO=command

# The base image already contains the oneAPI packages.
# Having this in the list can cause checksum errors when apt-get update.
RUN if [ "${BUILD_SYCL_MODULE}" = "ON" ]; then \
        rm -rf /etc/apt/sources.list.d/oneAPI.list; \
    fi

# Env vars for the nvidia-container-runtime.
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES all

# Update apt and install libs needed by Qt
RUN apt-get clean && apt-get update --fix-missing -y \
    && apt-get install apt-utils software-properties-common tzdata --fix-missing -y \
    && apt-key adv --fetch-keys https://apt.kitware.com/keys/kitware-archive-latest.asc \
    && apt-add-repository --yes "deb https://apt.kitware.com/ubuntu/ $(lsb_release -c --short) main" \
    && apt-get update --fix-missing -y \
    && apt-get install --fix-missing -yq --no-install-recommends \
        build-essential \
        git  \
        cmake \
        wget \
        curl \
        vim \
        tree \
        apt-file \
        net-tools \
        mesa-utils \
        # for opencv
        libjpeg-dev \
        libpng-dev \
        libtiff-dev \
        # for colmap
        libatlas-base-dev \
        # for package
        zip \
        unzip \
        locate \
        automake \
        xorg-dev \
        libxi-dev \
        openmpi-bin \
        openmpi-common \
        gfortran \
        ninja-build \
        libgtest-dev \
        libusb-dev \
        freeglut3-dev \
        pkg-config \
        libpcap-dev \
        clang-format \
        graphviz \
        nasm \
        flex \
        fontconfig \
        mono-complete \
        libgdal-dev \
        libcgal-dev \
        # for QT
        libxcb-xkb1 \
        libxcb-shape0 \
        libxcb-randr0 \
        libxcb-icccm4 \
        libxcb-image0 \
        libxcb-keysyms1 \
        libxcb-xinerama0 \
        libxkbcommon-x11-0 \
        libxcb-render-util0


# Dependencies: basic
RUN apt-get update && apt-get install -y \
    git  \
    wget \
    curl \
    build-essential \
    pkg-config \
 && rm -rf /var/lib/apt/lists/*

# Miniconda or Intel conda
# The **/cloudViewer/bin paths are used during docker run, in this way docker run
# does not need to activate the environment again.
ENV PATH="/root/miniconda3/bin:${PATH}"
ENV PATH="/root/miniconda3/envs/cloudViewer/bin:${PATH}"
ENV CONDA_PREFIX="/root/miniconda3/envs/cloudViewer"
ENV PATH="/opt/intel/oneapi/intelpython/latest/bin:${PATH}"
ENV PATH="/opt/intel/oneapi/intelpython/latest/envs/cloudViewer/bin:${PATH}"
RUN wget -q https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh \
    && bash Miniconda3-latest-Linux-x86_64.sh -b; \
    && rm Miniconda3-latest-Linux-x86_64.sh; \
RUN conda --version \
 && cp .ci/conda_cloudViewer.yml /root/conda_env_${PYTHON_VERSION}.yml; \
 && sed -i "s/3.8/${PYTHON_VERSION}/g" /root/conda_env_${PYTHON_VERSION}.yml; \
 && conda env create -f /root/conda_env_${PYTHON_VERSION}.yml

# Activate cloudViewr virtualenv
# This works during docker build. It becomes the prefix of all RUN commands.
# Ref: https://stackoverflow.com/a/60148365/1255535
SHELL ["conda", "run", "-n", "cloudViewer", "/bin/bash", "-o", "pipefail", "-c"]

# fix ubuntu2204 and conda library conflicts about incorrect link issues from ibffi.so.7 to libffi.so.8.1.0
# RUN echo -e "\ny" | conda install libffi==3.3

# Dependencies: cmake
ENV PATH=${HOME}/${CMAKE_VERSION}/bin:${PATH}
RUN CMAKE_VERSION_NUMBERS=$(echo "${CMAKE_VERSION}" | cut -d"-" -f2) \
 && wget -q https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION_NUMBERS}/${CMAKE_VERSION}.tar.gz \
 && tar -xf ${CMAKE_VERSION}.tar.gz \
 && cp -ar ${CMAKE_VERSION} ${HOME} \
 && cmake --version

# Dependencies: ccache
WORKDIR /root
RUN git clone https://github.com/ccache/ccache.git \
 && cd ccache \
 && git checkout v${CCACHE_VERSION} -b ${CCACHE_VERSION} \
 && mkdir build \
 && cd build \
 && cmake -DCMAKE_BUILD_TYPE=Release -DZSTD_FROM_INTERNET=ON .. \
 && make install -j$(nproc) \
 && which ccache \
 && ccache --version \
 && ccache -s

# deploy package installer
WORKDIR /root
RUN wget https://raw.githubusercontent.com/Asher-1/CloudViewerUpdate/main/tools/QtIFW-4.6.1-linux-amd.zip -O "/root/QtIFW-4.6.1-linux-amd.zip"
RUN unzip QtIFW-4.6.1-linux-amd.zip && rm -rf QtIFW-4.6.1-linux-amd.zip
ENV PATH="/root/QtIFW-4.6.1-linux-amd/bin:$PATH"

# Checkout CloudViewer-ML main branch
# TODO: We may add support for local CloudViewer-ML repo or pinned ML repo tag
ENV CLOUDVIEWER_ML_ROOT=/root/CloudViewer-ML
RUN git clone --depth 1 https://github.com/Asher-1/CloudViewer-ML.git ${CLOUDVIEWER_ML_ROOT}

# ACloudViewer repo
# Always keep /root/ACloudViewer as the WORKDIR
COPY . /root/ACloudViewer
WORKDIR /root/ACloudViewer

# ACloudViewer C++ dependencies
RUN ./util/install_deps_ubuntu.sh assume-yes

# ACloudViewer Python dependencies
WORKDIR /root/ACloudViewer
RUN source util/ci_utils.sh \
 && if [ "${BUILD_CUDA_MODULE}" = "ON" ]; then \
        install_python_dependencies with-cuda with-jupyter; \
    else \
        install_python_dependencies with-jupyter; \
    fi \
 && pip install -r python/requirements_test.txt

# ACloudViewer Jupyter dependencies
RUN mkdir -p /etc/apt/keyrings \
 && curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key \
 | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg \
 && echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_16.x nodistro main" \
 | tee /etc/apt/sources.list.d/nodesource.list \
 && apt-get update \
 && apt-get install -y nodejs \
 && rm -rf /var/lib/apt/lists/* \
 && node --version \
 && npm install -g yarn \
 && yarn --version


# [mv relocation issues] fix the issues about the conflicts with libattr between conda and system
RUN if [ -f "$CONDA_PREFIX/lib/libattr.so.1" ]; then \
        echo "fix issues with system about: $CONDA_PREFIX/lib/libattr.so.1" \
        mv $CONDA_PREFIX/lib/libattr.so.1 $CONDA_PREFIX/lib/libattr.so.2 \
        ln -s /lib/x86_64-linux-gnu/libattr.so.1 $CONDA_PREFIX/lib/libattr.so.1 \
    fi

# fix no such file: /usr/lib/libGL.so when building libPCLEngine
RUN if [ -f "/usr/lib/libGL.so" ]; then \
        echo "/usr/lib/libGL.so has been already, no need to soft link!" \
    else \
        echo "fix issues with no file in /usr/lib/libGL.so" \
        ln -s /usr/lib/x86_64-linux-gnu/libGL.so /usr/lib/libGL.so \
    fi

# fix libQt undefined issues
RUN if [ -f "/usr/lib/x86_64-linux-gnu/libstdc++.so.6" ]; then \
        rm /usr/lib/x86_64-linux-gnu/libstdc++.so.6 \
        ln -s $CONDA_PREFIX/lib/libstdc++.so.6 /usr/lib/x86_64-linux-gnu/libstdc++.so.6 \
    fi
RUN export LD_LIBRARY_PATH="$CONDA_PREFIX/lib:$LD_LIBRARY_PATH"

# Build all
RUN \
    if [ "${BUILD_SYCL_MODULE}" = "ON" ]; then \
        export CMAKE_CXX_COMPILER=icpx; \
        export CMAKE_C_COMPILER=icx; \
        export GLIBCXX_USE_CXX11_ABI=ON; \
    else \
        export CMAKE_CXX_COMPILER=g++; \
        export CMAKE_C_COMPILER=gcc; \
        # TODO: PyTorch still use old CXX ABI, remove this line when PyTorch is updated
        if [ "$BUILD_PYTORCH_OPS" = "ON" ]; then \
            export GLIBCXX_USE_CXX11_ABI=OFF; \
        else \
            export GLIBCXX_USE_CXX11_ABI=ON; \
        fi \
    fi \
 && mkdir build \
 && cd build \
 && cmake -DBUILD_SHARED_LIBS=OFF \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER} \
          -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER} \
          -DDEVELOPER_BUILD=${DEVELOPER_BUILD} \
          -DBUILD_CUDA_MODULE=${BUILD_CUDA_MODULE} \
          -DBUILD_COMMON_CUDA_ARCHS=ON \
          -DGLIBCXX_USE_CXX11_ABI=ON \
          -DBUILD_AZURE_KINECT=ON \
          -DBUILD_LIBREALSENSE=ON \
          -DWITH_OPENMP=ON \
          -DWITH_IPPICV=ON \
          -DWITH_SIMD=ON \
          -DUSE_SIMD=ON \
          -DPACKAGE=ON \
          -DBUILD_WEBRTC=OFF \
          -DBUILD_OPENCV=ON \
          -DBUILD_RECONSTRUCTION=ON \
          -DBUNDLE_CLOUDVIEWER_ML=OFF \
          -DCVCORELIB_USE_CGAL=ON \
          -DCVCORELIB_SHARED=ON \
          -DCVCORELIB_USE_QT_CONCURRENT=ON \
          -DOPTION_USE_GDAL=OFF \
          -DOPTION_USE_DXF_LIB=ON \
          -DPLUGIN_IO_QDRACO=ON \
          -DPLUGIN_IO_QLAS=ON \
          -DPLUGIN_IO_QADDITIONAL=ON \
          -DPLUGIN_IO_QCORE=ON \
          -DPLUGIN_IO_QCSV_MATRIX=ON \
          -DPLUGIN_IO_QE57=ON \
          -DPLUGIN_IO_QMESH=ON \
          -DPLUGIN_IO_QPDAL=OFF \
          -DPLUGIN_IO_QPHOTOSCAN=ON \
          -DPLUGIN_IO_QRDB=ON \
          -DPLUGIN_STANDARD_QJSONRPC=ON \
          -DPLUGIN_STANDARD_QCLOUDLAYERS=ON \
          -DPLUGIN_STANDARD_MASONRY_QAUTO_SEG=ON \
          -DPLUGIN_STANDARD_MASONRY_QMANUAL_SEG=ON \
          -DPLUGIN_STANDARD_QANIMATION=ON \
          -DQANIMATION_WITH_FFMPEG_SUPPORT=ON \
          -DPLUGIN_STANDARD_QCANUPO=ON \
          -DPLUGIN_STANDARD_QCOLORIMETRIC_SEGMENTER=ON \
          -DPLUGIN_STANDARD_QCOMPASS=ON \
          -DPLUGIN_STANDARD_QCSF=ON \
          -DPLUGIN_STANDARD_QFACETS=ON \
          -DPLUGIN_STANDARD_QHOUGH_NORMALS=ON \
          -DPLUGIN_STANDARD_QM3C2=ON \
          -DPLUGIN_STANDARD_QMPLANE=ON \
          -DPLUGIN_STANDARD_QPCL=ON \
          -DPLUGIN_STANDARD_QPOISSON_RECON=ON \
          -DPOISSON_RECON_WITH_OPEN_MP=ON \
          -DPLUGIN_STANDARD_QRANSAC_SD=ON \
          -DPLUGIN_STANDARD_QSRA=ON \
          -DBUILD_TENSORFLOW_OPS=OFF \
          -DBUILD_PYTORCH_OPS=OFF \
          -DBUILD_UNIT_TESTS=OFF \
          -DBUILD_BENCHMARKS=OFF \
          -DBUILD_EXAMPLES=OFF \
          -DCMAKE_PREFIX_PATH=$CONDA_PREFIX/lib \
          -DCMAKE_INSTALL_PREFIX=~/cloudviewer_install \
          .. \
 && make VERBOSE=1 -j$(nproc) \
 && make install -j$(nproc) \
 && if [ "${CI:-}a" != "a" ]; then rm -rf _deps assimp embree ipp mkl mkl_install webrtc; fi
# If CI is not null or unset, remove all large build folders to save disk space

# Compress ccache folder, move to / directory
RUN ccache -s \
 && CCACHE_DIR=$(ccache -p | grep cache_dir | grep -oE "[^ ]+$") \
 && CCACHE_DIR_NAME=$(basename ${CCACHE_DIR}) \
 && CCACHE_DIR_PARENT=$(dirname ${CCACHE_DIR}) \
 && cd ${CCACHE_DIR_PARENT} \
 && tar -czf /${CCACHE_TAR_NAME}.tar.gz ${CCACHE_DIR_NAME} \
 && if [ "${PACKAGE}" = "ON" ]; then mv ~/cloudviewer_install/*run /; fi \
 && ls -alh /

RUN echo "Docker build done."
