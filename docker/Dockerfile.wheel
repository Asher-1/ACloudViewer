# FROM must be called before other ARGS except for ARG BASE_IMAGE
ARG BASE_IMAGE=nvidia/cuda:11.8.0-cudnn8-devel-ubuntu20.04
FROM ${BASE_IMAGE}

# Customizable build arguments from cuda.yml
ARG DEVELOPER_BUILD
ARG CCACHE_TAR_NAME
ARG CMAKE_VERSION
ARG CCACHE_VERSION
ARG PYTHON_VERSION
ARG BUILD_TENSORFLOW_OPS
ARG BUILD_PYTORCH_OPS
ARG CI

# Forward all ARG to ENV
# ci_utils.sh requires these environment variables
ENV DEVELOPER_BUILD=${DEVELOPER_BUILD}
ENV CCACHE_TAR_NAME=${CCACHE_TAR_NAME}
ENV CMAKE_VERSION=${CMAKE_VERSION}
ENV CCACHE_VERSION=${CCACHE_VERSION}
ENV PYTHON_VERSION=${PYTHON_VERSION}
ENV BUILD_PYTORCH_OPS=${BUILD_PYTORCH_OPS}
ENV BUILD_TENSORFLOW_OPS=${BUILD_TENSORFLOW_OPS}

# Prevent interactive inputs when installing packages
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=America/Los_Angeles
ENV SUDO=command

# Miniconda requires bash as the default shell.
SHELL ["/bin/bash", "-c"]

# Fix Nvidia repo key rotation issue
# https://forums.developer.nvidia.com/t/notice-cuda-linux-repository-key-rotation/212771
# https://forums.developer.nvidia.com/t/18-04-cuda-docker-image-is-broken/212892/10
# https://code.visualstudio.com/remote/advancedcontainers/reduce-docker-warnings#:~:text=Warning%3A%20apt%2Dkey%20output%20should,not%20running%20from%20a%20terminal.
RUN export APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn \
 && apt-key del 7fa2af80 \
 && apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/3bf863cc.pub \
 && apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/7fa2af80.pub

 # Env vars for the nvidia-container-runtime.
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES all

# for QT
ENV REFRESHED_AT=2023-06-04\
    QT_ROOT=/opt/Qt5.14.2/ \
    QT_DIR=/opt/Qt5.14.2/5.14.2/gcc_64 \
    QT_CI_LOGIN=alicevisionjunk@gmail.com \
    QT_CI_PASSWORD=azerty1. \
    DEBIAN_FRONTEND=noninteractive

# Update apt and install libs needed by Qt
RUN sed -i s@/archive.ubuntu.com/@/mirrors.aliyun.com/@g /etc/apt/sources.list \
    && apt-get clean && apt-get update --fix-missing -y \
    && apt-get install apt-utils software-properties-common tzdata --fix-missing -y \
    && apt-key adv --fetch-keys https://apt.kitware.com/keys/kitware-archive-latest.asc \
    && apt-add-repository --yes "deb https://apt.kitware.com/ubuntu/ $(lsb_release -c --short) main" \
    && apt-get update --fix-missing -y \
    && apt-get install --fix-missing -yq --no-install-recommends \
        build-essential \
        git  \
        cmake \
        wget \
        curl \
        vim \
        tree \
        apt-file \
        net-tools \
        mesa-utils \
        # for opencv
        libavcodec-dev \
        libavformat-dev \
        libavutil-dev \
        libswscale-dev \
        libjpeg-dev \
        libpng-dev \
        libtiff-dev \
        # for colmap
        libatlas-base-dev \
        # for package
        zip \
        unzip \
        locate \
        automake \
        xorg-dev \
        libxi-dev \
        openmpi-bin \
        openmpi-common \
        gfortran \
        ninja-build \
        libgtest-dev \
        libusb-dev \
        freeglut3-dev \
        pkg-config \
        libpcap-dev \
        clang-format \
        graphviz \
        nasm \
        flex \
        fontconfig \
        mono-complete \
        # for pcl
        libopenni-dev \
        libopenni2-dev \
        libjsoncpp-dev \
        libgdal-dev \
        libcgal-dev \
        libusb-1.0-0-dev \
        libeigen3-dev \
        libboost-all-dev \
        libglew-dev \
        'libqhull*' \
        libqhull-dev \
        libflann1.9 \
        libflann-dev \
        # for QT
        libxcb-xkb1 \
        libxcb-shape0 \
        libxcb-randr0 \
        libxcb-icccm4 \
        libxcb-image0 \
        libxcb-keysyms1 \
        libxcb-xinerama0 \
        libxkbcommon-x11-0 \
        libxcb-render-util0

# Dependencies: basic
RUN apt-get update && apt-get install -y \
    git  \
    wget \
    curl \
 && rm -rf /var/lib/apt/lists/*

# Dependencies: cmake
RUN CMAKE_VERSION_NUMBERS=$(echo "${CMAKE_VERSION}" | cut -d"-" -f2) \
 && wget -q https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION_NUMBERS}/${CMAKE_VERSION}.tar.gz \
 && tar -xf ${CMAKE_VERSION}.tar.gz \
 && cp -ar ${CMAKE_VERSION} ${HOME}
ENV PATH=${HOME}/${CMAKE_VERSION}/bin:${PATH}

# Dependencies: ccache
WORKDIR /root
RUN git clone https://github.com/ccache/ccache.git \
 && cd ccache \
 && git checkout v${CCACHE_VERSION} -b ${CCACHE_VERSION} \
 && mkdir build \
 && cd build \
 && cmake -DCMAKE_BUILD_TYPE=Release -DZSTD_FROM_INTERNET=ON .. \
 && make install -j$(nproc) \
 && which ccache \
 && ccache --version \
 && ccache -s

# Miniconda
ENV PATH="/root/miniconda3/bin:${PATH}"
RUN wget -q https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh \
 && bash Miniconda3-latest-Linux-x86_64.sh -b \
 && rm Miniconda3-latest-Linux-x86_64.sh \
 && conda --version
ENV CONDA_PREFIX="/root/miniconda3/envs/cloudViewer"
ENV PATH="/root/miniconda3/envs/cloudViewer/bin:${PATH}"
RUN conda create -y -n cloudViewer python=${PYTHON_VERSION} \
 && source activate cloudViewer
RUN which python \
 && python --version

# fix ubuntu2204 and conda library conflicts about incorrect link issues from ibffi.so.7 to libffi.so.8.1.0
# RUN echo -e "\ny" | conda install libffi==3.3

# Checkout CloudViewer-ML main branch
# TODO: We may add support for local CloudViewer-ML repo or pinned ML repo tag
ENV CLOUDVIEWER_ML_ROOT=/root/CloudViewer-ML
RUN git clone --depth 1 https://github.com/Asher-1/CloudViewer-ML.git ${CLOUDVIEWER_ML_ROOT}

# ACloudViewer C++ dependencies
# Done before copying the full ACloudViewer directory for better Docker caching
COPY ./util/install_deps_ubuntu.sh /root/ACloudViewer/util/
RUN /root/ACloudViewer/util/install_deps_ubuntu.sh assume-yes \
 && rm -rf /var/lib/apt/lists/*

# deploy package installer
WORKDIR /root
RUN wget https://raw.githubusercontent.com/Asher-1/CloudViewerUpdate/main/tools/QtIFW-4.6.1-linux-amd.zip -O "/root/QtIFW-4.6.1-linux-amd.zip"
RUN unzip QtIFW-4.6.1-linux-amd.zip && rm -rf QtIFW-4.6.1-linux-amd.zip
ENV PATH="/root/QtIFW-4.6.1-linux-amd/bin:$PATH"

# Install metslib
WORKDIR /root
RUN wget https://raw.githubusercontent.com/Asher-1/CloudViewerUpdate/main/tools/metslib-0.5.3.tgz -O "/root/metslib-0.5.3.tgz"
RUN tar -xvf metslib-0.5.3.tgz && \
    cd metslib-0.5.3 && \
    sh ./configure && \
    make && \
    make install \
    && ldconfig \
    && rm -rf /opt/metslib-0.5.3 \
    && rm -rf /opt/metslib-0.5.3.tgz

# Install laszip
WORKDIR /root
RUN wget https://raw.githubusercontent.com/Asher-1/CloudViewerUpdate/main/tools/laszip-src-3.4.3.tar.gz -O "/root/laszip-src-3.4.3.tar.gz"
RUN tar -xvf laszip-src-3.4.3.tar.gz && \
    cd laszip-src-3.4.3 && \
    mkdir -p build && cd build && \
    cmake .. && \
    make "-j$(nproc)" && \
    make install "-j$(nproc)" && ldconfig \
    && rm -rf /root/laszip-src-3.4.3 /root/laszip-src-3.4.3.tar.gz

# Install xerces-c
WORKDIR /root
RUN wget https://archive.apache.org/dist/xerces/c/3/sources/xerces-c-3.2.3.zip -O "/root/xerces-c-3.2.3.zip"
RUN unzip xerces-c-3.2.3.zip \
    && cd ./xerces-c-3.2.3 \
    && chmod +x configure \
    && ./configure --prefix=/usr \
    && make \
    && make install \
    && make clean \
    && rm -rf /root/xerces-c-3.2.3 /root/xerces-c-3.2.3.zip

# Install Qt (to build plugins)
WORKDIR /root
RUN wget https://download.qt.io/archive/qt/5.14/5.14.2/qt-opensource-linux-x64-5.14.2.run -O "/root/qt.run"
COPY ./docker/qt-installer-noninteractive.qs /root
RUN chmod +x ./qt.run && \
    ./qt.run --verbose --platform minimal --script "/root/qt-installer-noninteractive.qs" && \
    rm qt.run
ENV LD_LIBRARY_PATH="/opt/Qt5.14.2/5.14.2/gcc_64/lib:$LD_LIBRARY_PATH"
ENV PATH="/opt/Qt5.14.2/5.14.2/gcc_64/lib/cmake:$PATH"

# Install vtk
WORKDIR /root
RUN wget https://raw.githubusercontent.com/Asher-1/CloudViewerUpdate/main/tools/VTK-9.3.1.tar.gz -O "/root/VTK-9.3.1.tar.gz"
RUN tar -zxvf VTK-9.3.1.tar.gz && \
    cd VTK-9.3.1 && \
    mkdir -p build && cd build && \
    cmake   -DCMAKE_BUILD_TYPE=RELEASE \
            -DVTK_GROUP_ENABLE_Qt=YES \
            -DVTK_MODULE_ENABLE_VTK_GUISupportQt=YES \
            -DVTK_MODULE_ENABLE_VTK_GUISupportQtQuick=YES \
            -DVTK_MODULE_ENABLE_VTK_GUISupportQtSQL=YES \
            -DVTK_MODULE_ENABLE_VTK_RenderingQt=YES \
            -DVTK_MODULE_ENABLE_VTK_ViewsQt=YES \
            -DVTK_QT_VERSION:STRING=5 \
            -DBUILD_SHARED_LIBS:BOOL=ON \
            -DQT_QMAKE_EXECUTABLE:PATH=${QT_DIR}/bin/qmake \
            -DCMAKE_PREFIX_PATH:PATH=${QT_DIR}/lib/cmake .. && \
    make "-j$(nproc)" && \
    make install "-j$(nproc)" && ldconfig && \
    rm -rf /root/VTK-9.3.1 /root/VTK-9.3.1.tar.gz

# Install pcl
RUN wget https://raw.githubusercontent.com/Asher-1/CloudViewerUpdate/main/tools/pcl-1.14.1.zip -O "/root/pcl-1.14.1.zip"
RUN unzip pcl-1.14.1.zip && \
    cd pcl && \
    mkdir -p build && cd build && \
    cmake   -DCMAKE_BUILD_TYPE=RELEASE \
            -DBUILD_GPU=OFF \
            -DBUILD_apps=OFF \
            -DBUILD_examples=OFF \
            -DBUILD_surface_on_nurbs=ON \
            -DQT_QMAKE_EXECUTABLE:PATH=${QT_DIR}/bin/qmake \
            -DCMAKE_PREFIX_PATH:PATH=${QT_DIR}/lib/cmake .. && \
    make "-j$(nproc)" && \
    make install "-j$(nproc)" && ldconfig && \
    rm -rf /opt/pcl /opt/pcl-1.14.1.zip

# ACloudViewer Python dependencies
COPY ./util/ci_utils.sh /root/ACloudViewer/util/
COPY ./python/requirements.txt /root/ACloudViewer/python/
COPY ./python/requirements_jupyter_build.txt /root/ACloudViewer/python/
COPY ./python/requirements_jupyter_install.txt /root/ACloudViewer/python/
RUN source /root/ACloudViewer/util/ci_utils.sh \
 && install_python_dependencies with-jupyter

# ACloudViewer Jupyter dependencies
RUN curl -fsSL https://deb.nodesource.com/setup_16.x | bash - \
 && apt-get install -y nodejs \
 && rm -rf /var/lib/apt/lists/* \
 && node --version
RUN npm install -g yarn \
 && yarn --version

# ACloudViewer repo
# Always keep /root/ACloudViewer as the WORKDIR
COPY . /root/ACloudViewer
WORKDIR /root/ACloudViewer

# Build python wheel
RUN export NPROC=$(nproc) \
 && export BUILD_SHARED_LIBS=OFF \
 && source /root/ACloudViewer/util/ci_utils.sh \
 && build_pip_package build_realsense build_azure_kinect build_jupyter \
 && if [ ${CI:-}a != a ]; then cd /root/ACloudViewer/build/ && ls | grep -Ev '^lib$' | xargs rm -rf ; fi
 # remove build folder (except lib) to save CI space on Github

# Compress ccache folder, move to / directory
RUN ccache -s \
 && CCACHE_DIR=$(ccache -p | grep cache_dir | grep -oE "[^ ]+$") \
 && CCACHE_DIR_NAME=$(basename ${CCACHE_DIR}) \
 && CCACHE_DIR_PARENT=$(dirname ${CCACHE_DIR}) \
 && cd ${CCACHE_DIR_PARENT} \
 && tar -czf /${CCACHE_TAR_NAME}.tar.gz ${CCACHE_DIR_NAME}

RUN echo "Docker build done."
