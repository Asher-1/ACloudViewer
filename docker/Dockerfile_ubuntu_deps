ARG VTK_VERSION
ARG PCL_VERSION
ARG CUDA_VERSION
ARG UBUNTU_VERSION
FROM nvidia/cuda:${CUDA_VERSION}-cudnn7-devel-ubuntu${UBUNTU_VERSION}
LABEL maintainer="ErowCloudViewer Team ludahai19@163.com"

# Execute with nvidia docker (https://github.com/nvidia/nvidia-docker/wiki/Installation-(version-2.0))
# docker run -it --runtime=nvidia erowcloudviewer-deps

ENV EROWCLOUDVIEWER_DEV=/opt/ErowCloudViewer \
    EROWCLOUDVIEWER_BUILD=/tmp/ErowCloudViewer_build \
    QT_DIR=/opt/Qt5.14.2/5.14.2/gcc_64 \
    QT_ROOT=/opt/Qt5.14.2/ \
    QT_CI_LOGIN=alicevisionjunk@gmail.com \
    QT_CI_PASSWORD=azerty1.

# update apt
RUN apt-get update --fix-missing -y \
    && apt-get install apt-utils software-properties-common --fix-missing -y \
    && apt-key adv --fetch-keys https://apt.kitware.com/keys/kitware-archive-latest.asc \
    && apt-add-repository --yes "deb https://apt.kitware.com/ubuntu/ $(lsb_release -c --short) main" \
    && apt-get update --fix-missing -y

# Install libs needed by Qt
RUN DEBIAN_FRONTEND=noninteractive apt-get install --fix-missing -yq \
        build-essential \
        vim \
        git \
        curl \
        g++ \
        tree \
        apt-file \
        ccache \
        libtbb2 \
        libgtk2.0-dev \
        libavcodec-dev \
        libavformat-dev \
        libswscale-dev \
        libjpeg-dev \
        libpng-dev \
        libtiff-dev \
        libdc1394-22-dev \
        unzip \
        locate \
        cmake \
        cmake-gui \
        wget \
        libsdl2-dev \
        xorg-dev \
        libc++-7-dev \
        libc++abi-7-dev \
        ninja-build \
        libxi-dev \
        libxmu-dev \
        libxi-dev \
        libflann1.9 \
        libflann-dev \
		libosmesa6-dev \
        libudev-dev \
        autoconf \
        libtool \
        libtbb-dev \
        mpi-default-dev \
        openmpi-bin \
        openmpi-common \
        libeigen3-dev \
        libboost-all-dev \
        libglew-dev \
        'libqhull*' \
        libgtest-dev \
        libusb-1.0-0-dev \
        libusb-dev \
        libudev-dev \
        git-core \
        freeglut3-dev \
        pkg-config \
        libpcap-dev \
        clang-format \
        libqhull-dev \
        graphviz \
        nasm \
        mono-complete \
        libopenni-dev \
        libopenni2-dev \
        libgl1-mesa-dev \
        libglu1-mesa-dev \
        libx11-dev \
        libxext-dev \
        libxtst-dev \
        libxrender-dev \
        libxmu-dev \
        libxmuu-dev \
        flex \
        fontconfig \
        libfreetype6 \
        libglib2.0-0 \ 
        libice6 \
        libx11-6 \
        libxcb1 \
        libxext6 \
        libxi6 \
        libxrender1 \
        libsm6 \
        libxt-dev \
        libglu-dev \
        libosmesa-dev \
        libgl-dev \
        libglu-dev \
	    libqt5charts5-dev \
        libxcb-keysyms1 \
        libxcb-image0 \
        libxkbcommon-x11-0 \
	    libz-dev \
	    systemd \
	    libjsoncpp-dev \
	    libcgal-dev \
	    ssh

# Install and update npm and nodejs
RUN   apt-get install nodejs npm -y \
      && npm install npm@latest -g \
      && npm install n -g \
      && n latest

# Install xerces-c
WORKDIR /opt
COPY dl/xerces-c-3.2.3.zip /opt
RUN cd /opt \
    && unzip xerces-c-3.2.3.zip \
    && cd ./xerces-c-3.2.3 \
    && chmod +x configure \
    && ./configure --prefix=/usr \
    && make \
    && make install \
    && make clean \
    && rm -rf /opt/xerces-c-3.2.3.zip

# Install Miniconda3
WORKDIR /opt
COPY dl/Miniconda3-latest-Linux-x86_64.sh /opt
RUN cd /opt && sh -c '/bin/echo -e "\nyes\n\nyes" | sh Miniconda3-latest-Linux-x86_64.sh' \
    && echo -e "\ny" && /root/miniconda3/bin/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ \
    && /root/miniconda3/bin/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/ \
    && /root/miniconda3/bin/conda config --set show_channel_urls yes \
    && echo -e "\ny" | /root/miniconda3/bin/conda install python=3.6 \
    && /root/miniconda3/bin/pip install --upgrade pip \
    && rm Miniconda3-latest-Linux-x86_64.sh

# fix Miniconda3 python object.h bugs with qt
RUN sed -i "s/PyType_Slot \*slots/PyType_Slot \*_slots/g" /root/miniconda3/include/python3.6m/object.h

# Install ErowCloudViewer requirements and freeze bundle
COPY ./*requirements.txt ${EROWCLOUDVIEWER_DEV}/
WORKDIR "${EROWCLOUDVIEWER_DEV}"
RUN DEBIAN_FRONTEND=noninteractive /root/miniconda3/bin/pip install --user  -U pip -i https://pypi.tuna.tsinghua.edu.cn/simple/  \
                                && /root/miniconda3/bin/pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/
RUN /root/miniconda3/bin/conda install -c conda-forge pdal python-pdal -y
RUN /root/miniconda3/bin/pip install -r requirements.txt

# Install kinetic
RUN curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add - \
    && apt-add-repository --yes https://packages.microsoft.com/ubuntu/18.04/prod \
    && echo 'libk4a1.4 libk4a1.4/accepted-eula-hash string 0f5d5c5de396e4fee4c0753a21fee0c1ed726cf0316204edda484f08cb266d76' | debconf-set-selections \
    && echo 'libk4a1.4 libk4a1.4/accept-eula boolean true' | debconf-set-selections \
    && apt-get --yes install libk4a1.4 libk4a1.4-dev k4a-tools

# Install Qt (to build plugins)
WORKDIR /tmp/qt
COPY dl/qt.run /tmp/qt
COPY ./docker/qt-installer-noninteractive.qs ${EROWCLOUDVIEWER_DEV}/docker/
RUN chmod +x qt.run && \
    ./qt.run --verbose --platform minimal --script "${EROWCLOUDVIEWER_DEV}/docker/qt-installer-noninteractive.qs" && \
    rm qt.run

ENV PATH=/opt/Qt5.14.2/5.14.2/gcc_64/bin:$PATH \
    LD_LIBRARY_PATH=/opt/Qt5.14.2/5.14.2/gcc_64/lib:$LD_LIBRARY_PATH \
    QT_PLUGIN_PATH=/opt/Qt5.14.2/5.14.2/gcc_64/plugins:$QT_PLUGIN_PATH \
    QML2_IMPORT_PATH=/opt/Qt5.14.2/5.14.2/gcc_64/qml:$QML2_IMPORT_PATH

# Install opencv
WORKDIR /opt
COPY dl/opencv.zip /opt
COPY dl/opencv_contrib.zip /opt
#RUN cd /opt && git clone https://github.com/Itseez/opencv.git && \
RUN cd /opt && unzip opencv.zip && unzip opencv_contrib.zip && \
        #cd opencv && git checkout 4.3.0 && \
        #cd /opt && git clone https://github.com/Itseez/opencv_contrib.git && \
        #cd opencv_contrib && git checkout 4.3.0 && \
        cd opencv && mkdir -p build && cd build && \
        cmake   -DCMAKE_BUILD_TYPE=RELEASE \
                -DCMAKE_INSTALL_PREFIX=/usr/local \
                -DOPENCV_EXTRA_MODULES_PATH=/opt/opencv_contrib/modules \
                -DBUILD_EXAMPLES=OFF .. && \
        make "-j$(nproc)" && \
        make install "-j$(nproc)" && ldconfig && \
        rm -rf ./* && \
        rm -rf /opt/opencv.zip /opt/opencv_contrib.zip

# Install vtk
WORKDIR /opt
COPY dl/VTK-8.2.0.zip /opt
#RUN cd /opt && git clone https://github.com/Kitware/VTK.git --recursive && \
RUN cd /opt && unzip VTK-8.2.0.zip && \
        cd VTK && \
        #git checkout "${VTK_VERSION}" && \
        mkdir -p build && cd build && \
        cmake   -DCMAKE_BUILD_TYPE=RELEASE \
		        -DVTK_QT_VERSION:STRING=5 \
		        -DVTK_Group_Qt:BOOL=ON \
		        -DBUILD_SHARED_LIBS:BOOL=ON \
		        -DVTK_BUILD_QT_DESIGNER_PLUGIN:BOOL=ON \
		        -DBUILD_surface_on_nurbs=ON \
                -DQT_QMAKE_EXECUTABLE:PATH=${QT_DIR}/bin/qmake \
                -DCMAKE_PREFIX_PATH:PATH=${QT_DIR}/lib/cmake .. && \
        make "-j$(nproc)" && \
        make install "-j$(nproc)" && ldconfig && \
        cp lib/libQVTKWidgetPlugin.so "${QT_DIR}"/plugins/designer && \
        cp lib/libQVTKWidgetPlugin.so "${QT_ROOT}"/Tools/QtCreator/lib/Qt/plugins/designer && \
        rm -rf ./* && \
        rm -rf /opt/VTK-8.2.0.zip

# Install pcl
WORKDIR /opt
COPY dl/pcl-1.11.1.zip /opt
#RUN cd /opt && git clone https://github.com/PointCloudLibrary/pcl.git --recursive && \
RUN cd /opt && unzip pcl-1.11.1.zip && \
        cd pcl && \
        #git checkout "${PCL_VERSION}" && \
        mkdir -p build && cd build && \
        cmake   -DCMAKE_BUILD_TYPE=RELEASE \
		        -DBUILD_GPU=ON \
		        -DBUILD_apps=ON \
		        -DBUILD_examples=ON \
		        -DBUILD_surface_on_nurbs=ON \
                -DQT_QMAKE_EXECUTABLE:PATH=${QT_DIR}/bin/qmake \
                -DCMAKE_PREFIX_PATH:PATH=${QT_DIR}/lib/cmake .. && \
        make "-j$(nproc)" && \
        make install "-j$(nproc)" && ldconfig && \
        rm -rf ./* && \
        rm -rf /opt/pcl-1.11.1.zip

# Enable SSH X11 forwarding, needed when the Docker image
# is run on a remote machine
RUN apt install ssh xauth && \
	systemctl enable ssh && \
	mkdir -p /run/sshd

RUN sed -i "s/^.*X11Forwarding.*$/X11Forwarding yes/; s/^.*X11UseLocalhost.*$/X11UseLocalhost no/; s/^.*PermitRootLogin prohibit-password/PermitRootLogin yes/; s/^.*X11UseLocalhost.*/X11UseLocalhost no/;" /etc/ssh/sshd_config
RUN echo "root:erowcloudviewer" | chpasswd

WORKDIR /root

EXPOSE 22
CMD ["/usr/sbin/sshd", "-D"]

