ARG VTK_VERSION
ARG PCL_VERSION
ARG CUDA_VERSION
ARG UBUNTU_VERSION
FROM nvidia/cuda:${CUDA_VERSION}-devel-ubuntu${UBUNTU_VERSION}

# For bash-specific commands
SHELL ["/bin/bash", "-c"]

# FROM nvidia/opengl:1.2-glvnd-devel-ubuntu${UBUNTU_VERSION}
# FROM gezp/ubuntu-nomachine:${UBUNTU_VERSION}-cu${CUDA_VERSION}
LABEL maintainer="ACloudViewer Team ludahai19@163.com"

# Env vars for the nvidia-container-runtime.
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES all
ENV CMAKE_VERSION=cmake-3.24.4-linux-x86_64
ENV SUDO=command

# Execute with nvidia docker (https://github.com/nvidia/nvidia-docker/wiki/Installation-(version-2.0))
# docker run -it --runtime=nvidia cloudviewer-deps

ENV REFRESHED_AT=2023-06-04\
    CLOUDVIEWER_DEV=/opt/ACloudViewer \
    QT_DIR=/opt/Qt5.14.2/5.14.2/gcc_64 \
    QT_ROOT=/opt/Qt5.14.2/ \
    QT_CI_LOGIN=alicevisionjunk@gmail.com \
    QT_CI_PASSWORD=azerty1. \
    DEBIAN_FRONTEND=noninteractive

# cloudViewer Jupyter dependencies
RUN sed -i s@/archive.ubuntu.com/@/mirrors.aliyun.com/@g /etc/apt/sources.list \
&& apt-get clean && apt-get update --fix-missing -y

# Dependencies: basic
# Update apt and install libs needed by Qt, pcl and vtk
RUN apt-get install apt-utils software-properties-common tzdata --fix-missing -y \
    && apt-key adv --fetch-keys https://apt.kitware.com/keys/kitware-archive-latest.asc \
    && apt-add-repository --yes "deb https://apt.kitware.com/ubuntu/ $(lsb_release -c --short) main" \
    && apt-get update --fix-missing -y \
    && apt-get install --fix-missing -yq --no-install-recommends \
        build-essential \
        git  \
        cmake \
        wget \
        curl \
        vim \
        tree \
        apt-file \
        net-tools \
        mesa-utils \
        # for opencv
        libavcodec-dev \
        libavformat-dev \
        libswscale-dev \
        libjpeg-dev \
        libpng-dev \
        libtiff-dev \
        libglew-dev \
        # for colmap
        libatlas-base-dev \
        # for package
        zip \
        unzip \
        locate \
        automake \
        xorg-dev \
        libxi-dev \
        openmpi-bin \
        openmpi-common \
        gfortran \
        ninja-build \
        libgtest-dev \
        libusb-dev \
        freeglut3-dev \
        pkg-config \
        libpcap-dev \
        clang-format \
        graphviz \
        nasm \
        flex \
        fontconfig \
        mono-complete \
        # for pcl
        libopenni-dev \
        libopenni2-dev \
        libjsoncpp-dev \
        libgdal-dev \
        libcgal-dev \
        libusb-1.0-0-dev \
        libeigen3-dev \
        libboost-all-dev \
        libglew-dev \
        'libqhull*' \
        libqhull-dev \
        libflann1.9 \
        libflann-dev \
        # libgtk2.0-dev \
        # libx11-6 \
        # libgl1-mesa-dev \
        # libglu1-mesa-dev \
        # libx11-dev \
        # libxext-dev \
        # libxtst-dev \
        # libxrender-dev \
        # libxmu-dev \
        # libxmuu-dev \
        # libfreetype6 \
        # libxcb1 \
        # libxext6 \
        # libxi6 \
        # libxrender1 \
        # libsm6 \
        # libxt-dev \
        # libgl-dev \
        # libglu-dev \
        # libz-dev \
        # for QT
        libxcb-xkb1 \
        libxcb-shape0 \
        libxcb-randr0 \
        libxcb-icccm4 \
        libxcb-image0 \
        libxcb-keysyms1 \
        libxcb-xinerama0 \
        libxkbcommon-x11-0 \
        libxcb-render-util0

# C++ dependencies
WORKDIR /opt
COPY ./util/install_deps_ubuntu.sh /opt
RUN /opt/install_deps_ubuntu.sh assume-yes

# ACloudViewer Jupyter dependencies
RUN mkdir -p /etc/apt/keyrings \
 && curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key \
 | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg \
 && echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_16.x nodistro main" \
 | tee /etc/apt/sources.list.d/nodesource.list \
 && apt-get update \
 && apt-get install -y nodejs \
 && node --version \
 && npm install -g yarn \
 && yarn --version

# deploy package installer
WORKDIR /opt
COPY docker_files/QtIFW-4.6.1-linux-amd.zip /opt
RUN unzip QtIFW-4.6.1-linux-amd.zip && rm -rf QtIFW-4.6.1-linux-amd.zip
ENV PATH="/opt/QtIFW-4.6.1-linux-amd/bin:$PATH"

# Install Qt (to build plugins)
WORKDIR /tmp/qt
COPY docker_files/qt.run /tmp/qt
COPY ./docker/qt-installer-noninteractive.qs ${CLOUDVIEWER_DEV}/docker/
RUN chmod +x qt.run && \
    ./qt.run --verbose --platform minimal --script "${CLOUDVIEWER_DEV}/docker/qt-installer-noninteractive.qs" && \
    rm qt.run && rm -rf ${CLOUDVIEWER_DEV}/docker
ENV LD_LIBRARY_PATH="/opt/Qt5.14.2/5.14.2/gcc_64/lib:$LD_LIBRARY_PATH"
ENV PATH="/opt/Qt5.14.2/5.14.2/gcc_64/bin:$PATH"

# Install metslib
WORKDIR /opt
COPY docker_files/metslib-0.5.3.tgz /opt
RUN tar -xvf metslib-0.5.3.tgz && \
    cd metslib-0.5.3 && \
    sh ./configure && \
    make && \
    make install \
    && ldconfig \
    && rm -rf /opt/metslib-0.5.3 \
    && rm -rf /opt/metslib-0.5.3.tgz

# Install laszip
WORKDIR /opt
COPY docker_files/laszip-src-3.4.3.tar.gz /opt
RUN tar -xvf laszip-src-3.4.3.tar.gz && \
    cd laszip-src-3.4.3 && \
    mkdir -p build && cd build && \
    cmake .. && \
    make "-j$(nproc)" && \
    make install "-j$(nproc)" \
    && ldconfig \
    && rm -rf /opt/laszip-src-3.4.3 \
    && rm -rf /opt/laszip-src-3.4.3.zip

# Install xerces-c
WORKDIR /opt
COPY docker_files/xerces-c-3.2.3.zip /opt
RUN unzip xerces-c-3.2.3.zip \
    && cd ./xerces-c-3.2.3 \
    && chmod +x configure \
    && ./configure --prefix=/usr \
    && make \
    && make install \
    && make clean \
    && rm -rf /opt/xerces-c-3.2.3 \
    && rm -rf /opt/xerces-c-3.2.3.zip

# Install Miniconda3
WORKDIR /opt
COPY docker_files/Miniconda3-latest-Linux-x86_64.sh /opt
RUN sh -c '/bin/echo -e "\nyes\n\nyes" | sh Miniconda3-latest-Linux-x86_64.sh' \
    && echo -e "\ny" && /root/miniconda3/bin/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ \
    && /root/miniconda3/bin/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/ \
    && /root/miniconda3/bin/conda config --set show_channel_urls yes \
    && echo -e "\ny" | /root/miniconda3/bin/conda install python=3.8 \
    && /root/miniconda3/bin/pip install --upgrade pip \
    && rm Miniconda3-latest-Linux-x86_64.sh
ENV PATH="/root/miniconda3/bin:$PATH"
# fix ubuntu2204 and conda library conflicts about incorrect link issues from ibffi.so.7 to libffi.so.8.1.0
RUN echo -e "\ny" | conda install libffi==3.3

# libgdal.so complain undefined TIFF* and object.h bugs with qt bugs
# RUN rm -rf /usr/lib/x86_64-linux-gnu/libtiff* \
#     && ln -s /root/miniconda3/lib/libtiff.so.5.6.0 /usr/lib/x86_64-linux-gnu/libtiff.so.5 \
#     && ln -s /root/miniconda3/lib/libtiffxx.so.5.6.0 /usr/lib/x86_64-linux-gnu/libtiffxx.so.5 \
#     && ln -s /root/miniconda3/lib/libwebp.so.7.1.1 /usr/lib/x86_64-linux-gnu/libwebp.so.7 \
#     && ln -s /root/miniconda3/lib/libjpeg.so.9.4.0 /usr/lib/x86_64-linux-gnu/libjpeg.so.9 \
#     && sed -i "s/PyType_Slot \*slots/PyType_Slot \*_slots/g" /root/miniconda3/include/python3.8/object.h \
#     && ldconfig

# Install vtk
WORKDIR /opt
COPY docker_files/VTK-9.3.1.tar.gz /opt
RUN tar -zxvf VTK-9.3.1.tar.gz && \
    rm VTK-9.3.1.tar.gz && \
    cd VTK-9.3.1 && \
    mkdir -p build && cd build && \
    cmake   -DCMAKE_BUILD_TYPE=RELEASE \
            -DVTK_GROUP_ENABLE_Qt=YES \
            -DVTK_MODULE_ENABLE_VTK_GUISupportQt=YES \
            -DVTK_MODULE_ENABLE_VTK_GUISupportQtQuick=YES \
            -DVTK_MODULE_ENABLE_VTK_GUISupportQtSQL=YES \
            -DVTK_MODULE_ENABLE_VTK_RenderingQt=YES \
            -DVTK_MODULE_ENABLE_VTK_ViewsQt=YES \
            -DVTK_QT_VERSION:STRING=5 \
            -DBUILD_SHARED_LIBS:BOOL=ON \
            -DQT_QMAKE_EXECUTABLE:PATH=${QT_DIR}/bin/qmake \
            -DCMAKE_PREFIX_PATH:PATH=${QT_DIR}/lib/cmake .. && \
    make "-j$(nproc)" && \
    make install "-j$(nproc)" && ldconfig && \
    rm -rf ./*

# Install pcl
WORKDIR /opt
COPY docker_files/pcl-1.14.1.zip /opt
RUN unzip pcl-1.14.1.zip && \
    rm pcl-1.14.1.zip && \
    cd pcl && \
    mkdir -p build && cd build && \
    cmake   -DCMAKE_BUILD_TYPE=RELEASE \
            -DBUILD_GPU=OFF \
            -DBUILD_apps=OFF \
            -DBUILD_examples=OFF \
            -DBUILD_surface_on_nurbs=ON \
            -DQT_QMAKE_EXECUTABLE:PATH=${QT_DIR}/bin/qmake \
            -DCMAKE_PREFIX_PATH:PATH=${QT_DIR}/lib/cmake .. && \
    make "-j$(nproc)" && \
    make install "-j$(nproc)" && ldconfig && \
    rm -rf ./*

WORKDIR /root

# Enable SSH X11 forwarding, needed when the Docker image
# is run on a remote machine
# RUN sed -i "s/^.*X11Forwarding.*$/X11Forwarding yes/; s/^.*X11UseLocalhost.*$/X11UseLocalhost no/; s/^.*PermitRootLogin prohibit-password/PermitRootLogin yes/; s/^.*X11UseLocalhost.*/X11UseLocalhost no/;" /etc/ssh/sshd_config
# RUN echo "root:toor" | chpasswd

# WORKDIR /
# COPY docker/nxserver.sh /
# RUN chmod +x /nxserver.sh \
#     && ln -s /opt/Qt5.14.2/5.14.2/gcc_64/lib/libQt5X11Extras.so.5.14.2 /usr/lib/libQt5X11Extras.so.5 \
#     && rm -rf /var/lib/apt/lists/* \
#     && rm -rf /root/miniconda3/pkgs/* \
#     && rm -rf /root/.cache/* \
#     && rm -rf /root/.ccache/*

# EXPOSE 22 4000
# ENTRYPOINT ["/nxserver.sh"]
