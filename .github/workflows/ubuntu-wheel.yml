name: Ubuntu Wheel
permissions: {}

on:
  workflow_dispatch:
    inputs:
      developer_build:
        description: 'Set to OFF for Release wheels'
        required: false
        default: 'ON'
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
  pull_request:
    types: [opened, reopened, synchronize]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  BUILD_CUDA_MODULE: 'ON'
  BUILD_PYTORCH_OPS: 'ON'
  BUILD_TENSORFLOW_OPS: 'OFF'   # Turn ON when cxx11_abi is same for TF and PyTorch

jobs:
  skip-check:
    runs-on: ubuntu-latest
    name: Skip job for forks
    permissions:
      contents: read
    outputs:
      skip: ${{ steps.check.outputs.skip }}
    steps:
      - name: Skip check
        id: check
        run: |
          if [ "${GITHUB_REPOSITORY}" == "Asher-1/ACloudViewer" ]; then
            echo "skip=no" >> $GITHUB_OUTPUT
          else
            echo "skip=yes" >> $GITHUB_OUTPUT
          fi

  build-wheel:
    permissions:
      contents: write  # upload
      actions: write   # release
    name: Build wheel
    runs-on: ubuntu-latest
    needs: [skip-check]
    if: needs.skip-check.outputs.skip == 'no' && !contains(github.event.head_commit.message, '[skip ci]')
    strategy:
      fail-fast: false
      matrix:
        python_version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        is_main:
          - ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v') }}
        exclude:
          - is_main: false
            python_version: '3.8'
          - is_main: false
            python_version: '3.9'
          - is_main: false
            python_version: '3.10'
          - is_main: false
            python_version: '3.11'
    env:
      DEVELOPER_BUILD: ${{ github.event.inputs.developer_build || 'ON' }}
      PYTHON_VERSION: ${{ matrix.python_version }}
      CCACHE_TAR_NAME: cloudViewer-ubuntu-2004-cuda-ci-ccache
      CLOUDVIEWER_CPU_RENDERING: true
    steps:
      - name: Setup DEVELOPER_BUILD
        run: |
          if [[ "${GITHUB_EVENT_NAME}" == "push" && "${GITHUB_REF}" == refs/tags/v* ]]; then
            echo "DEVELOPER_BUILD=OFF" >> $GITHUB_ENV
          else
            echo "DEVELOPER_BUILD=${{ github.event.inputs.developer_build || 'ON' }}" >> $GITHUB_ENV
          fi
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'
          build-mount-path: '/var/lib/docker'
          build-mount-path-ownership: 'root:root'
      
      - name: Additional space optimization
        run: |
          echo "=== Initial disk space ==="
          df -h

          echo "=== Initial disk space /var/lib/docker ==="
          df -h /var/lib/docker
          
          # Clean up additional space
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf /usr/local/share/powershell
          sudo rm -rf /usr/share/swift
          sudo rm -rf /opt/az
          sudo rm -rf /usr/local/.ghcup

          # Configure Docker to use efficient storage
          echo "=== Stopping Docker service ==="
          sudo systemctl stop docker.socket || true
          sudo systemctl stop docker.service || true
          sudo systemctl stop containerd || true
          
          # Wait for Docker to fully stop
          sleep 5
          
          # Clean up any existing Docker data to avoid conflicts
          sudo rm -rf /var/lib/docker/* || true
          
          # Create Docker daemon config for space optimization
          sudo mkdir -p /etc/docker
          sudo tee /etc/docker/daemon.json > /dev/null <<EOF
          {
            "storage-driver": "overlay2",
            "log-driver": "json-file",
            "log-opts": {
              "max-size": "10m",
              "max-file": "3"
            },
            "max-concurrent-downloads": 3,
            "max-concurrent-uploads": 3
          }
          EOF
          
          echo "=== Starting Docker service ==="
          sudo systemctl start containerd || true
          sudo systemctl start docker.service
          sudo systemctl start docker.socket || true
          
          # Wait for Docker to be ready
          echo "=== Waiting for Docker to be ready ==="
          timeout 60 bash -c 'until docker info >/dev/null 2>&1; do echo "Waiting for Docker..."; sleep 2; done' || {
            echo "Docker failed to start, checking logs:"
            sudo journalctl -u docker.service --no-pager -l | tail -20
            sudo systemctl status docker.service
            exit 1
          }
          
          # Clean Docker system
          docker system prune -a -f --volumes || true
          
          echo "=== After cleanup disk space ==="
          df -h
          
          echo "=== Docker info ==="
          docker info
      - name: Checkout source code
        uses: actions/checkout@v4
      # Be verbose and explicit here such that a developer can directly copy the
      # `docker/docker_build.sh xxx` command to execute locally.
      - name: Docker build
        run: |
          echo "DEVELOPER_BUILD is $DEVELOPER_BUILD"
          
          # Clean up before build to ensure maximum space
          docker system prune -f --volumes || true
          if [ "${{ env.PYTHON_VERSION }}" = "3.8" ] && [ "${{ env.DEVELOPER_BUILD }}" = "ON"  ]; then
            docker/docker_build.sh cuda_wheel_py38_dev
          elif [ "${{ env.PYTHON_VERSION }}" = "3.9" ] && [ "${{ env.DEVELOPER_BUILD }}" = "ON"  ]; then
            docker/docker_build.sh cuda_wheel_py39_dev
          elif [ "${{ env.PYTHON_VERSION }}" = "3.10" ] && [ "${{ env.DEVELOPER_BUILD }}" = "ON"  ]; then
            docker/docker_build.sh cuda_wheel_py310_dev
          elif [ "${{ env.PYTHON_VERSION }}" = "3.11" ] && [ "${{ env.DEVELOPER_BUILD }}" = "ON"  ]; then
            docker/docker_build.sh cuda_wheel_py311_dev
          elif [ "${{ env.PYTHON_VERSION }}" = "3.12" ] && [ "${{ env.DEVELOPER_BUILD }}" = "ON"  ]; then
            docker/docker_build.sh cuda_wheel_py312_dev
          elif [ "${{ env.PYTHON_VERSION }}" = "3.8" ] && [ "${{ env.DEVELOPER_BUILD }}" = "OFF" ]; then
            docker/docker_build.sh cuda_wheel_py38
          elif [ "${{ env.PYTHON_VERSION }}" = "3.9" ] && [ "${{ env.DEVELOPER_BUILD }}" = "OFF" ]; then
            docker/docker_build.sh cuda_wheel_py39
          elif [ "${{ env.PYTHON_VERSION }}" = "3.10" ] && [ "${{ env.DEVELOPER_BUILD }}" = "OFF" ]; then
            docker/docker_build.sh cuda_wheel_py310
          elif [ "${{ env.PYTHON_VERSION }}" = "3.11" ] && [ "${{ env.DEVELOPER_BUILD }}" = "OFF" ]; then
            docker/docker_build.sh cuda_wheel_py311
          elif [ "${{ env.PYTHON_VERSION }}" = "3.12" ] && [ "${{ env.DEVELOPER_BUILD }}" = "OFF" ]; then
            docker/docker_build.sh cuda_wheel_py312
          fi
          PIP_PKG_NAME="$(basename ${GITHUB_WORKSPACE}/cloudViewer-[0-9]*.whl)"
          PIP_CPU_PKG_NAME="$(basename ${GITHUB_WORKSPACE}/cloudViewer_cpu*.whl)"
          echo "PIP_PKG_NAME=$PIP_PKG_NAME" >> $GITHUB_ENV
          echo "PIP_CPU_PKG_NAME=$PIP_CPU_PKG_NAME" >> $GITHUB_ENV
          
          echo "=== Post-build cleanup and disk space ==="
          # Clean up Docker build cache and unused images
          docker builder prune -f || true
          docker image prune -f || true
          
          # Show final disk usage
          df -h
          docker system df

      - name: Upload Wheel to GitHub artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PIP_PKG_NAME }}
          path: |
            ${{ env.PIP_PKG_NAME }}
            ${{ env.PIP_CPU_PKG_NAME }}
          if-no-files-found: error

      - name: Update devel release
        if: ${{ github.ref == 'refs/heads/main' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload main-devel ${{ env.PIP_PKG_NAME }} \
          ${{ env.PIP_CPU_PKG_NAME }} --clobber
          gh release view main-devel

      - name: Public Wheel Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          fail_on_unmatched_files: false
          generate_release_notes: false
          prerelease: false
          files: |
            ${{ env.PIP_PKG_NAME }}
            ${{ env.PIP_CPU_PKG_NAME }}

  # due to undefined symbol: _ZN6google14FlagRegistererC1ISsEEPKcS3_S3_PT_S5_
  test-wheel:
    name: Test wheel
    permissions:
      contents: read
    runs-on: ubuntu-22.04
    needs: [build-wheel]
    strategy:
      fail-fast: false
      matrix:
        python_version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        is_main:
          - ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v') }}
        exclude:
          - is_main: false
            python_version: '3.8'
          - is_main: false
            python_version: '3.9'
          - is_main: false
            python_version: '3.10'
          - is_main: false
            python_version: '3.11'
    env:
      # CONDA_DEP_FILE: ".ci/conda_linux.yml"
      CLOUDVIEWER_ML_ROOT: ${{ github.workspace }}/CloudViewer-ML
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Maximize build space
        run: |
          source util/ci_utils.sh
          maximize_ubuntu_github_actions_build_space
      - name: Checkout CloudViewer-ML source code
        uses: actions/checkout@v4
        with:
          repository: Asher-1/CloudViewer-ML
          path: ${{ env.CLOUDVIEWER_ML_ROOT }}
      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          pattern: cloudViewer*-manylinux*.whl
          merge-multiple: true
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python_version }}
      # - name: Set up Python version
      #   run: |
      #     sed -i "s/3.8/${{ matrix.python_version }}/g" ${{ env.CONDA_DEP_FILE }}
      # - name: Set up Python environment
      #   uses: conda-incubator/setup-miniconda@v3
      #   with:
      #     activate-environment: python${{ matrix.python_version }}
      #     auto-activate-base: false
      #     environment-file: ${{ env.CONDA_DEP_FILE }}
          
      - name: Test Python package
        shell: bash -l {0}
        run: |
          python -V
          source util/ci_utils.sh
          pi_tag=$(python -c "import sys; print(f'cp{sys.version_info.major}{sys.version_info.minor}')")
          test_wheel cloudViewer-[0-9]*-"$pi_tag"-*.whl
      - name: Test Python package (CPU)
        shell: bash -l {0}
        env:
          BUILD_CUDA_MODULE: OFF
        run: |
          python -V
          source util/ci_utils.sh
          pi_tag=$(python -c "import sys; print(f'cp{sys.version_info.major}{sys.version_info.minor}')")
          test_wheel cloudViewer_cpu*-"$pi_tag"-*.whl
