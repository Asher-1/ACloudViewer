name: Windows
permissions: {}

on:
  workflow_dispatch:
    inputs:
      developer_build:
        description: "Set to OFF for Release wheels"
        required: false
        default: "ON"

  push:
    branches:
      - main
  pull_request:
    types: [opened, reopened, synchronize] # Rebuild on new pushes to PR

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  PIP_VER: "23.2.1"
  WHEEL_VER: "0.38.4"
  STOOLS_VER: "67.3.2"
  JEDI_VER: "0.17.2"  # https://github.com/ipython/ipython/issues/12740
  IDNA_VER: "2.8"  # https://github.com/psf/requests/issues/5710
  CUDA_VERSION: "11.8.0" # CUDA_VERSION: "12.1.0"
  SRC_DIR: "D:\\a\\ACloudViewer\\ACloudViewer"
  BUILD_DIR: "C:\\ACloudViewer\\build"
  NPROC: 2
  DEVELOPER_BUILD: ${{ github.event.inputs.developer_build || 'ON' }}

jobs:
  windows:
    permissions:
      contents: write  # upload
    runs-on: windows-2019
    strategy:
      fail-fast: false
      matrix:
        BUILD_SHARED_LIBS: [ON, OFF]
        STATIC_RUNTIME: [ON, OFF]
        BUILD_CUDA_MODULE: [ON, OFF]
        CONFIG: [Release, Debug]
        exclude:
          - BUILD_SHARED_LIBS: ON
            STATIC_RUNTIME: ON
        include:
          - BUILD_CUDA_MODULE: ON
    env:
      BUILD_WEBRTC: ${{ ( matrix.BUILD_SHARED_LIBS == 'OFF' && matrix.STATIC_RUNTIME == 'ON' ) && 'ON' || 'OFF' }}
      CONDA_DEP_FILE_CLOUDVIEWER: ".ci/conda_windows_cloudViewer.yml"

    steps:
      - name: Disk space used
        run: Get-PSDrive

      - name: Setup Windows SDK
        uses: GuillaumeFalourd/setup-windows10-sdk-action@v2
        with:
          sdk-version: 19041

      - name: Install CUDA
        if: ${{ matrix.BUILD_CUDA_MODULE == 'ON' }}
        run: |
          # Define variables
          $CUDA_VER_FULL = "${{ env.CUDA_VERSION }}"
          $CUDA_VER_ARR = $CUDA_VER_FULL.Split(".")
          $CUDA_VER = "$($CUDA_VER_ARR[0]).$($CUDA_VER_ARR[1])"
          $CUDA_VER_ID = "$($CUDA_VER_ARR[0])_$($CUDA_VER_ARR[1])"
          # Installer url
          if ( $CUDA_VER_ARR[0] -ge 11 ) {
            $CUDA_URL = "http://developer.download.nvidia.com/compute/cuda/$CUDA_VER_FULL/network_installers/cuda_$($CUDA_VER_FULL)_windows_network.exe"
          } else {
            $CUDA_URL = "http://developer.download.nvidia.com/compute/cuda/$CUDA_VER/Prod/network_installers/cuda_$($CUDA_VER_FULL)_win10_network.exe"
          }
                    # Installer arguments
          $CUDA_INSTALL_ARGS = "-s"
          # Required packages
          $CUDA_PACKAGES = "nvcc", "visual_studio_integration", "cublas", "cublas_dev", "cudart", "cusolver", "cusolver_dev", "npp", "npp_dev", "thrust"
          $CUDA_PACKAGES.ForEach({ $CUDA_INSTALL_ARGS += " $($_)_$($CUDA_VER)" })
          # Download and install CUDA
          echo "Downloading CUDA installer from $CUDA_URL"
          Invoke-WebRequest $CUDA_URL -OutFile cuda.exe
          echo "Installing CUDA..."
          Start-Process -Wait -FilePath .\cuda.exe -ArgumentList "$CUDA_INSTALL_ARGS"
          if ( !$? ) {
            exit 1
          }
          # Add CUDA environment variables.
          $CUDA_PATH = "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v$CUDA_VER"
          echo "CUDA_PATH=$CUDA_PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "CUDA_PATH_V$CUDA_VER_ID=$CUDA_PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "$CUDA_PATH\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Checkout source code
        uses: actions/checkout@v4

      # DGM: without caching, using conda on Windows takes a long time...
      - name: Set up Python version
        uses: conda-incubator/setup-miniconda@v3
        with:
          architecture: 'x64'
          activate-environment: cloudViewer
          auto-activate-base: false
          environment-file: ${{ env.CONDA_DEP_FILE_CLOUDVIEWER }}

      - name: Install dependencies
        run: |
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/Asher-1/CloudViewerUpdate/main/tools/QtIFW-4.6.1-win.zip" -OutFile "C:\QtIFW-4.6.1-win.zip"
          Expand-Archive "C:\QtIFW-4.6.1-win.zip" "C:\" -Force && rm C:\QtIFW-4.6.1-win.zip
          $env:PATH = "C:\QtIFW-4.6.1-win\bin;$env:PATH"
          echo $env:PATH
          echo "PATH=$env:PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Config
        # Move build directory to C: https://github.com/actions/virtual-environments/issues/1341
        run: |
          echo "CONDA_PREFIX: $env:CONDA_PREFIX"
          $env:CONDA_LIB_DIR = Join-Path $env:CONDA_PREFIX "Library"
          $env:PATH = "$env:CONDA_PREFIX\Library;$env:CONDA_PREFIX\Library\cmake;$env:PATH"
          echo "PATH=$env:PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          $ErrorActionPreference = 'Stop'
          New-Item -Path ${{ env.BUILD_DIR }} -ItemType Directory
          cd ${{ env.BUILD_DIR }}
          if (${env:DEVELOPER_BUILD} -ne "OFF") {
            ${env:DEVELOPER_BUILD}="ON"
          }
          cmake -G "Visual Studio 16 2019" -A x64 `
            -DDEVELOPER_BUILD="${env:DEVELOPER_BUILD}" `
            -DCMAKE_SYSTEM_VERSION="10.0.19041.0" `
            -DBUILD_EXAMPLES=OFF `
            -DCMAKE_INSTALL_PREFIX="C:\dev\cloudViewer_install" `
            -DBUILD_SHARED_LIBS=${{ matrix.BUILD_SHARED_LIBS }} `
            -DSTATIC_WINDOWS_RUNTIME=${{ matrix.STATIC_RUNTIME }} `
            -DBUILD_CUDA_MODULE=${{ matrix.BUILD_CUDA_MODULE }} `
            -DBUILD_LIBREALSENSE=ON `
            -DBUILD_WEBRTC=${{ env.BUILD_WEBRTC }} `
            -DWITH_OPENMP=ON `
            -DWITH_SIMD=ON `
            -DUSE_SIMD=ON `
            -DPACKAGE=ON `
            -DBUILD_BENCHMARKS=OFF `
            -DBUILD_OPENCV=ON `
            -DBUILD_RECONSTRUCTION=ON `
            -DCVCORELIB_USE_CGAL=OFF `
            -DCVCORELIB_SHARED=ON `
            -DCVCORELIB_USE_QT_CONCURRENT=ON `
            -DOPTION_USE_GDAL=OFF `
            -DOPTION_USE_DXF_LIB=ON `
            -DPLUGIN_IO_QDRACO=ON `
            -DPLUGIN_IO_QLAS=ON `
            -DPLUGIN_IO_QADDITIONAL=ON `
            -DPLUGIN_IO_QCORE=ON `
            -DPLUGIN_IO_QCSV_MATRIX=ON `
            -DPLUGIN_IO_QE57=ON `
            -DPLUGIN_IO_QMESH=ON `
            -DPLUGIN_IO_QPDAL=OFF `
            -DPLUGIN_IO_QPHOTOSCAN=ON `
            -DPLUGIN_IO_QRDB=ON `
            -DPLUGIN_IO_QRDB_FETCH_DEPENDENCY=ON `
            -DPLUGIN_IO_QFBX=ON `
            -DPLUGIN_IO_QSTEP=ON `
            -DPLUGIN_STANDARD_QCORK=ON `
            -DPLUGIN_STANDARD_QJSONRPC=ON `
            -DPLUGIN_STANDARD_QCLOUDLAYERS=ON `
            -DPLUGIN_STANDARD_MASONRY_QAUTO_SEG=ON `
            -DPLUGIN_STANDARD_MASONRY_QMANUAL_SEG=ON `
            -DPLUGIN_STANDARD_QANIMATION=ON `
            -DQANIMATION_WITH_FFMPEG_SUPPORT=ON `
            -DPLUGIN_STANDARD_QCANUPO=ON `
            -DPLUGIN_STANDARD_QCOLORIMETRIC_SEGMENTER=ON `
            -DPLUGIN_STANDARD_QCOMPASS=ON `
            -DPLUGIN_STANDARD_QCSF=ON `
            -DPLUGIN_STANDARD_QFACETS=ON `
            -DPLUGIN_STANDARD_QHOUGH_NORMALS=ON `
            -DPLUGIN_STANDARD_QM3C2=ON `
            -DPLUGIN_STANDARD_QMPLANE=ON `
            -DPLUGIN_STANDARD_QPCL=ON `
            -DPLUGIN_STANDARD_QPOISSON_RECON=ON `
            -DPOISSON_RECON_WITH_OPEN_MP=ON `
            -DPLUGIN_STANDARD_QSRA=ON `
            -DCMAKE_PREFIX_PATH=$env:CONDA_LIB_DIR `
            -DBUILD_UNIT_TESTS=OFF `
            ${{ env.SRC_DIR }}

      - name: ACloudViewer App
        working-directory: ${{ env.BUILD_DIR }}
        if: ${{ matrix.BUILD_SHARED_LIBS == 'OFF' && matrix.STATIC_RUNTIME == 'ON' && matrix.BUILD_CUDA_MODULE == 'OFF' && matrix.CONFIG == 'Release' }}
        run: |
          $ErrorActionPreference = 'Stop'
          cmake --build . --parallel ${{ env.NPROC }} --config ${{ matrix.CONFIG }} `
            --target ALL_BUILD
          cmake --build . --parallel ${{ env.NPROC }} --config ${{ matrix.CONFIG }} `
            --target INSTALL

      - name: Upload ACloudViewer
        if: ${{ matrix.BUILD_SHARED_LIBS == 'OFF' && matrix.STATIC_RUNTIME == 'ON' && matrix.BUILD_CUDA_MODULE == 'OFF' && matrix.CONFIG == 'Release' }}
        uses: actions/upload-artifact@v4
        with:
          name: cloudViewer-app-windows-amd64
          path: C:\dev\cloudViewer_install\ACloudViewer-*.exe
          if-no-files-found: error
      - name: Disk space used
        run: Get-PSDrive

  build-wheel:
    name: Build wheel
    permissions:
      contents: write  # upload
    runs-on: windows-2019
    strategy:
      fail-fast: false
      # https://github.community/t/how-to-conditionally-include-exclude-items-in-matrix-eg-based-on-branch/16853/6
      matrix:
        python_version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        is_main:
          - ${{ github.ref == 'refs/heads/main' }}
        exclude:
          - is_main: false
            python_version: '3.8'
          - is_main: false
            python_version: '3.9'
          - is_main: false
            python_version: '3.10'
          - is_main: false
            python_version: '3.11'

    env:
      CONDA_DEP_FILE: ".ci/conda_windows.yml"

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Setup Windows SDK
        uses: GuillaumeFalourd/setup-windows10-sdk-action@v2
        with:
          sdk-version: 19041

      - name: Set up python version
        run: |
          (Get-Content ${{ env.CONDA_DEP_FILE }}) -replace "3.8", ${{ matrix.python_version }} | Set-Content ${{ env.CONDA_DEP_FILE }}

      # DGM: without caching, using conda on Windows takes a long time...
      - name: Set up Python environment
        uses: conda-incubator/setup-miniconda@v3
        with:
          architecture: 'x64'
          activate-environment: python${{ matrix.python_version }}
          auto-activate-base: false
          environment-file: ${{ env.CONDA_DEP_FILE }}

      - name: Install Python dependencies
        working-directory: ${{ env.SRC_DIR }}
        run: |
          $ErrorActionPreference = 'Stop'
          python -m pip install -r python/requirements.txt
          python -m pip install -r python/requirements_jupyter_build.txt

      - name: Config
        run: |
          $env:CONDA_LIB_DIR = Join-Path $env:CONDA_PREFIX "Library"
          $env:PATH = "$env:CONDA_PREFIX\Library;$env:CONDA_PREFIX\Library\cmake;$env:PATH"
          echo "PATH=$env:PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          $ErrorActionPreference = 'Stop'
          New-Item -Path ${{ env.BUILD_DIR }} -ItemType Directory
          cd ${{ env.BUILD_DIR }}
          if (${env:DEVELOPER_BUILD} -ne "OFF") {
            ${env:DEVELOPER_BUILD}="ON"
          }
          cmake -G "Visual Studio 16 2019" -A x64 `
            -DCMAKE_INSTALL_PREFIX="C:\dev\cloudViewer_install" `
            -DDEVELOPER_BUILD="${env:DEVELOPER_BUILD}" `
            -DCMAKE_SYSTEM_VERSION="10.0.19041.0" `
            -DCMAKE_PREFIX_PATH=$env:CONDA_LIB_DIR `
            -DBUILD_SHARED_LIBS=OFF `
            -DSTATIC_WINDOWS_RUNTIME=OFF `
            -DBUILD_AZURE_KINECT=ON `
            -DBUILD_LIBREALSENSE=ON `
            -DBUILD_JUPYTER_EXTENSION=ON `
            -DBUILD_UNIT_TESTS=OFF `
            -DBUILD_BENCHMARKS=OFF `
            -DWITH_OPENMP=ON `
            -DWITH_IPPICV=ON `
            -DWITH_SIMD=ON `
            -DUSE_SIMD=ON `
            -DBUILD_RECONSTRUCTION=ON `
            ${{ env.SRC_DIR }}

      - name: Build Python package
        working-directory: ${{ env.BUILD_DIR }}
        run: |
          $ErrorActionPreference = 'Stop'
          python -m pip install --upgrade pip==${{ env.PIP_VER }} `
                                          wheel==${{ env.WHEEL_VER }} `
                                          setuptools==${{ env.STOOLS_VER }}
          cmake --build . --parallel ${{ env.NPROC }} --config Release --target pip-package
          $PIP_PKG_NAME=(Get-ChildItem lib/python_package/pip_package/cloudViewer*.whl).Name
          echo "PIP_PKG_NAME=$PIP_PKG_NAME"  | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PIP_PKG_NAME }}
          path: ${{ env.BUILD_DIR }}/lib/python_package/pip_package/${{ env.PIP_PKG_NAME }}
          if-no-files-found: error

  test-wheel:
    name: Test wheel
    permissions:
      contents: read
    runs-on: windows-2019
    needs: [build-wheel]
    strategy:
      fail-fast: false
      matrix:
        python_version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        is_main:
          - ${{ github.ref == 'refs/heads/main' }}
        exclude:
          - is_main: false
            python_version: '3.8'
          - is_main: false
            python_version: '3.9'
          - is_main: false
            python_version: '3.10'
          - is_main: false
            python_version: '3.11'

    env:
      CONDA_DEP_FILE: ".ci/conda_windows.yml"

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          pattern: cloudViewer*win*.whl
          merge-multiple: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python_version }}

      - name: Test Python package
        run: |
          $ErrorActionPreference = 'Stop'
          python -V
          python -m venv cloudViewer_test_venv
          cloudViewer_test_venv\Scripts\Activate.ps1

          python -m pip install --upgrade pip==${{ env.PIP_VER }} `
            wheel==${{ env.WHEEL_VER }} `
            setuptools==${{ env.STOOLS_VER }}
          python -m pip install -U -r python/requirements_test.txt
          $py_tag=(python -c "import sys; print(f'cp{sys.version_info.major}{sys.version_info.minor}')")
          if (Test-Path -Path "pip_package") {
            $PIP_PKG_NAME=(Get-ChildItem pip_package\cloudViewer*-$py_tag-*.whl).Name
          } else {
            $PIP_PKG_NAME=(Get-ChildItem cloudViewer*-$py_tag-*.whl).Name
          }
          echo "Installing ACloudViewer wheel $PIP_PKG_NAME in virtual environment..."
          python -m pip install "$PIP_PKG_NAME"
          python -c "import cloudViewer; print('Imported:', cloudViewer)"
          python -c "import cloudViewer; print('CUDA enabled: ', cloudViewer.core.cuda.is_available())"
          deactivate

      # - name: Run Python unit tests
      #   run: |
      #     $ErrorActionPreference = 'Stop'
      #     cloudViewer_test_venv\Scripts\Activate.ps1
      #     echo "Running ACloudViewer python tests..."
      #     echo "Add --randomly-seed=SEED to the test command to reproduce test order."
      #     echo "Testing ML and ML Ops disabled"
      #     python -m pytest python/test/ --ignore python/test/ml_ops/
      #     deactivate
