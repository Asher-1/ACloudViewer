# - librealsense upgrade needed to build with MSVC 17
# - MSVC 17 and CUDA 12.4+ error while building CreateCUDAHashBackend.cu (Debug only)
# - PyTorch Ops in debug mode - DLL initialization error while loading cloudViewer_torch_ops.dll
# - CUDA - Draw.exe does not run due to CUDA DLL path issues

name: Windows
permissions: {}

on:
  workflow_dispatch:
    inputs:
      developer_build:
        description: "Set to OFF for Release wheels"
        required: false
        default: "ON"

  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
  pull_request:
    types: [opened, reopened, synchronize] # Rebuild on new pushes to PR

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  PIP_VER: "23.2.1"
  WHEEL_VER: "0.38.4"
  STOOLS_VER: "67.3.2"
  JEDI_VER: "0.17.2"  # https://github.com/ipython/ipython/issues/12740
  IDNA_VER: "2.8"  # https://github.com/psf/requests/issues/5710
  CUDA_VERSION: "12.6.0" # CUDA_VERSION: "11.8.0"
  SRC_DIR: "D:\\a\\ACloudViewer\\ACloudViewer"
  BUILD_DIR: "C:\\ACloudViewer\\build"
  INSTALL_DIR: "C:\\dev\\cloudViewer_install"
  NPROC: 2
  DEVELOPER_BUILD: ${{ github.event.inputs.developer_build || 'ON' }}

jobs:
  windows:
    permissions:
      contents: write  # upload
      actions: write   # release
    runs-on: windows-2022
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    strategy:
      fail-fast: false
      matrix:
        python_version: ['3.11']
        BUILD_SHARED_LIBS: [ON, OFF]
        STATIC_RUNTIME: [ON, OFF]
        BUILD_CUDA_MODULE: [ON, OFF]
        CONFIG: [Release, Debug]
        exclude:
          - BUILD_SHARED_LIBS: ON
          - STATIC_RUNTIME: ON
        include:
          - BUILD_SHARED_LIBS: OFF
          - STATIC_RUNTIME: OFF
    env:
      CONDA_DEP_FILE_CLOUDVIEWER: ".ci/conda_windows_cloudViewer.yml"

    steps:
      - name: Setup DEVELOPER_BUILD
        run: |
          if ($env:GITHUB_EVENT_NAME -eq "push" -and $env:GITHUB_REF -like "refs/tags/v*") {
            echo "DEVELOPER_BUILD=OFF" >> $env:GITHUB_ENV
          } else {
            echo "DEVELOPER_BUILD=$env:DEVELOPER_BUILD" >> $env:GITHUB_ENV
          }
      - name: Disk space used
        run: Get-PSDrive

      - name: Install CUDA
        uses: Jimver/cuda-toolkit@v0.2.23
        if: ${{ matrix.BUILD_CUDA_MODULE == 'ON' }}
        id: cuda-toolkit
        with:
          cuda: "${{ env.CUDA_VERSION }}"
          sub-packages: '["nvcc", "visual_studio_integration", "cublas", "cublas_dev", "cudart", "cusolver", "cusolver_dev", "cusparse", "cusparse_dev", "npp", "npp_dev", "thrust", "nvtx", "curand", "curand_dev", "nvrtc_dev"]'
          method: 'network'
          use-github-cache: 'false'
          use-local-cache: 'false'
  
      - name: Setup ENV
        if: ${{ matrix.BUILD_CUDA_MODULE == 'ON' }}
        run: |
          $CUDA_VER_FULL = "${{ env.CUDA_VERSION }}"
          $CUDA_VER_ARR = $CUDA_VER_FULL.Split(".")
          $CUDA_VER = "$($CUDA_VER_ARR[0]).$($CUDA_VER_ARR[1])"
          $CUDA_VER_ID = "$($CUDA_VER_ARR[0])_$($CUDA_VER_ARR[1])"

          # Add CUDA environment variables.
          $CUDA_PATH = "${{ steps.cuda-toolkit.outputs.CUDA_PATH }}"
          echo "CUDA_PATH=$CUDA_PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "CUDA_PATH_V$CUDA_VER_ID=$CUDA_PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "$CUDA_PATH\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

          echo "DEVELOPER_BUILD is $env:DEVELOPER_BUILD"

      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up python version
        run: |
          (Get-Content ${{ env.CONDA_DEP_FILE_CLOUDVIEWER }}) -replace "3.8", "${{ matrix.python_version }}" | Set-Content ${{ env.CONDA_DEP_FILE_CLOUDVIEWER }}

      # DGM: without caching, using conda on Windows takes a long time...
      - name: Set up Python environment
        uses: conda-incubator/setup-miniconda@v3
        with:
          architecture: 'x64'
          activate-environment: cloudViewer
          auto-activate-base: false
          environment-file: ${{ env.CONDA_DEP_FILE_CLOUDVIEWER }}

      - name: Install dependencies
        # deploy QtIFW for installer and deploy 3rdparty_downloads.zip for fast building on windows
        run: |
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/Asher-1/CloudViewerUpdate/main/tools/QtIFW-4.6.1-win.zip" -OutFile "C:\QtIFW-4.6.1-win.zip"
          Expand-Archive "C:\QtIFW-4.6.1-win.zip" "C:\" -Force && Remove-Item "C:\QtIFW-4.6.1-win.zip"
          $env:PATH = "C:\QtIFW-4.6.1-win\bin;$env:PATH"
          echo $env:PATH
          echo "PATH=$env:PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

          Invoke-WebRequest -Uri "https://github.com/Asher-1/cloudViewer_downloads/releases/download/1.9.4/3rdparty_downloads.zip" -OutFile "3rdparty_downloads.zip"
          Expand-Archive "3rdparty_downloads.zip" "${{ env.SRC_DIR }}" -Force && Remove-Item "3rdparty_downloads.zip"

      - name: Config
        # Move build directory to C: https://github.com/actions/virtual-environments/issues/1341
        run: |
          echo "CONDA_PREFIX: $env:CONDA_PREFIX"
          $env:CONDA_LIB_DIR = Join-Path $env:CONDA_PREFIX "Library"
          $env:PATH = "$env:CONDA_LIB_DIR;$env:CONDA_LIB_DIR\cmake;$env:PATH"
          echo "PATH=$env:PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          $env:PKG_CONFIG_PATH = "$env:CONDA_LIB_DIR\lib\pkgconfig;$env:PKG_CONFIG_PATH"
          echo "PKG_CONFIG_PATH=$env:PKG_CONFIG_PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          $env:EIGEN_ROOT_DIR = "$env:CONDA_LIB_DIR/include/eigen3"
          echo "EIGEN_ROOT_DIR=$env:EIGEN_ROOT_DIR" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

          $ErrorActionPreference = 'Stop'
          New-Item -Path ${{ env.BUILD_DIR }} -ItemType Directory
          cd ${{ env.BUILD_DIR }}
          if (${env:DEVELOPER_BUILD} -ne "OFF") {
            ${env:DEVELOPER_BUILD}="ON"
          }
          echo "DEVELOPER_BUILD is ${env:DEVELOPER_BUILD}"
          cmake -G "Visual Studio 17 2022" -A x64 `
            -DDEVELOPER_BUILD="${env:DEVELOPER_BUILD}" `
            -DCMAKE_SYSTEM_VERSION="10.0.19041.0" `
            -DBUILD_EXAMPLES=OFF `
            -DCMAKE_INSTALL_PREFIX="${{ env.INSTALL_DIR }}" `
            -DBUILD_SHARED_LIBS=${{ matrix.BUILD_SHARED_LIBS }} `
            -DSTATIC_WINDOWS_RUNTIME=${{ matrix.STATIC_RUNTIME }} `
            -DBUILD_CUDA_MODULE=${{ matrix.BUILD_CUDA_MODULE }} `
            -DWITH_OPENMP=ON `
            -DWITH_SIMD=ON `
            -DUSE_SIMD=ON `
            -DPACKAGE=ON `
            -DBUILD_BENCHMARKS=OFF `
            -DBUILD_OPENCV=ON `
            -DBUILD_RECONSTRUCTION=ON `
            -DCVCORELIB_USE_CGAL=ON `
            -DCVCORELIB_SHARED=ON `
            -DCVCORELIB_USE_QT_CONCURRENT=ON `
            -DOPTION_USE_GDAL=OFF `
            -DOPTION_USE_DXF_LIB=ON `
            -DPLUGIN_IO_QDRACO=ON `
            -DPLUGIN_IO_QLAS=ON `
            -DPLUGIN_IO_QADDITIONAL=ON `
            -DPLUGIN_IO_QCORE=ON `
            -DPLUGIN_IO_QCSV_MATRIX=ON `
            -DPLUGIN_IO_QE57=ON `
            -DPLUGIN_IO_QMESH=ON `
            -DPLUGIN_IO_QPDAL=OFF `
            -DPLUGIN_IO_QPHOTOSCAN=ON `
            -DPLUGIN_IO_QRDB=ON `
            -DPLUGIN_IO_QRDB_FETCH_DEPENDENCY=ON `
            -DPLUGIN_IO_QFBX=ON `
            -DPLUGIN_IO_QSTEP=OFF `
            -DPLUGIN_STANDARD_QCORK=ON `
            -DPLUGIN_STANDARD_QJSONRPC=ON `
            -DPLUGIN_STANDARD_QCLOUDLAYERS=ON `
            -DPLUGIN_STANDARD_MASONRY_QAUTO_SEG=ON `
            -DPLUGIN_STANDARD_MASONRY_QMANUAL_SEG=ON `
            -DPLUGIN_STANDARD_QANIMATION=ON `
            -DQANIMATION_WITH_FFMPEG_SUPPORT=ON `
            -DPLUGIN_STANDARD_QCANUPO=ON `
            -DPLUGIN_STANDARD_QCOLORIMETRIC_SEGMENTER=ON `
            -DPLUGIN_STANDARD_QCOMPASS=ON `
            -DPLUGIN_STANDARD_QCSF=ON `
            -DPLUGIN_STANDARD_QFACETS=ON `
            -DPLUGIN_STANDARD_QHOUGH_NORMALS=ON `
            -DPLUGIN_STANDARD_QM3C2=ON `
            -DPLUGIN_STANDARD_QMPLANE=ON `
            -DPLUGIN_STANDARD_QPCL=ON `
            -DPLUGIN_STANDARD_QPOISSON_RECON=ON `
            -DPOISSON_RECON_WITH_OPEN_MP=ON `
            -DPLUGIN_STANDARD_QSRA=ON `
            -DPLUGIN_STANDARD_3DMASC=ON `
            -DPLUGIN_STANDARD_QTREEISO=ON `
            -DPLUGIN_STANDARD_QVOXFALL=ON `
            -DCMAKE_PREFIX_PATH=$env:CONDA_LIB_DIR `
            -DCONDA_PREFIX=$env:CONDA_PREFIX `
            -DEIGEN_ROOT_DIR="$env:EIGEN_ROOT_DIR" `
            -DPLUGIN_PYTHON=ON `
            -DBUILD_PYTHON_MODULE=ON `
            -DBUILD_WITH_CONDA=ON `
            -DBUILD_UNIT_TESTS=OFF `
            ${{ env.SRC_DIR }}

      - name: ACloudViewer App
        working-directory: ${{ env.BUILD_DIR }}
        if: ${{ matrix.BUILD_SHARED_LIBS == 'OFF' && matrix.STATIC_RUNTIME == 'OFF' && matrix.CONFIG == 'Release' }}
        run: |
          $ErrorActionPreference = 'Stop'
          cmake --build . --parallel ${{ env.NPROC }} --config ${{ matrix.CONFIG }} `
            --target ALL_BUILD
          cmake --build . --parallel ${{ env.NPROC }} --config ${{ matrix.CONFIG }} `
            --target INSTALL
          
          $PACKAGE_INSTALLER_NAME=(Get-ChildItem (Join-Path "${{ env.INSTALL_DIR }}" "ACloudViewer-*.exe")).Name
          echo "PACKAGE_INSTALLER_NAME=$PACKAGE_INSTALLER_NAME"  | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Upload ACloudViewer to GitHub artifacts
        if: ${{ matrix.BUILD_SHARED_LIBS == 'OFF' && matrix.STATIC_RUNTIME == 'OFF' && matrix.CONFIG == 'Release' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE_INSTALLER_NAME }}
          path: ${{ env.INSTALL_DIR }}\${{ env.PACKAGE_INSTALLER_NAME }}
          if-no-files-found: error

      - name: Update devel release
        if: ${{ github.ref == 'refs/heads/main' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload main-devel ${{ env.INSTALL_DIR }}\${{ env.PACKAGE_INSTALLER_NAME }} --clobber
          gh release view main-devel

      - name: Public App Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          fail_on_unmatched_files: false
          generate_release_notes: false
          prerelease: false
          # body_path: ${{github.workspace}}/CHANGELOG.md
          files: |
            ${{ env.INSTALL_DIR }}\${{ env.PACKAGE_INSTALLER_NAME }}

      - name: Disk space used
        run: Get-PSDrive

  build-wheel:
    name: Build wheel
    permissions:
      contents: write  # upload
      actions: write   # release
    runs-on: windows-2022
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    strategy:
      fail-fast: false
      # https://github.community/t/how-to-conditionally-include-exclude-items-in-matrix-eg-based-on-branch/16853/6
      matrix:
        BUILD_CUDA_MODULE: [ON, OFF]
        python_version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        is_main:
          - ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v') }}
        exclude:
          - BUILD_CUDA_MODULE: OFF
          - is_main: false
            python_version: '3.8'
          - is_main: false
            python_version: '3.9'
          - is_main: false
            python_version: '3.10'
          - is_main: false
            python_version: '3.11'

    env:
      BUILD_TORCH_OPS: ON
      # TensorFlow v2.16 does not support Python 3.8
      BUILD_TENSORFLOW_OPS: OFF
      BUILD_JUPYTER_EXTENSION: ON
      BUILD_AZURE_KINECT: ON
      BUILD_LIBREALSENSE: ON
      CLOUDVIEWER_ML_ROOT: ${{ github.workspace }}/CloudViewer-ML

    steps:
      - name: Setup DEVELOPER_BUILD
        run: |
          if ($env:GITHUB_EVENT_NAME -eq "push" -and $env:GITHUB_REF -like "refs/tags/v*") {
            echo "DEVELOPER_BUILD=OFF" >> $env:GITHUB_ENV
          } else {
            echo "DEVELOPER_BUILD=$env:DEVELOPER_BUILD" >> $env:GITHUB_ENV
          }
      - name: Setup Windows SDK
        uses: GuillaumeFalourd/setup-windows10-sdk-action@v2
        with:
          sdk-version: 19041

      - name: Install CUDA
        uses: Jimver/cuda-toolkit@v0.2.23
        if: ${{ matrix.BUILD_CUDA_MODULE == 'ON' }}
        id: cuda-toolkit
        with:
          cuda: "${{ env.CUDA_VERSION }}"
          # sub-packages: '["nvcc", "visual_studio_integration", "cublas", "cublas_dev", "nvtx", "cudart", "cusolver", "cusolver_dev", "cusparse", "cusparse_dev", "npp", "npp_dev", "thrust", "curand", "curand_dev", "nvrtc", "nvrtc_dev"]'
          method: 'local'
          # Do not cache the installer (~3 GiB). It doesn't speed up the
          # installation significantly. And we need the space for ccache.
          use-github-cache: 'false'

      - name: Setup ENV
        if: ${{ matrix.BUILD_CUDA_MODULE == 'ON' }}
        run: |
          $CUDA_VER_FULL = "${{ env.CUDA_VERSION }}"
          $CUDA_VER_ARR = $CUDA_VER_FULL.Split(".")
          $CUDA_VER = "$($CUDA_VER_ARR[0]).$($CUDA_VER_ARR[1])"
          $CUDA_VER_ID = "$($CUDA_VER_ARR[0])_$($CUDA_VER_ARR[1])"

          # Add CUDA environment variables.
          $CUDA_PATH = "${{ steps.cuda-toolkit.outputs.CUDA_PATH }}"
          echo "CUDA_PATH=$CUDA_PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "CUDA_PATH_V$CUDA_VER_ID=$CUDA_PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "$CUDA_PATH\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

          echo "DEVELOPER_BUILD is $env:DEVELOPER_BUILD"

      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Checkout CloudViewer-ML source code
        uses: actions/checkout@v4
        with:
          repository: Asher-1/CloudViewer-ML
          path: ${{ env.CLOUDVIEWER_ML_ROOT }}

      # DGM: without caching, using conda on Windows takes a long time...
      - name: Set up Python environment
        uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: ${{ matrix.python_version }}
          auto-activate-base: true

      - name: Install 3rdparty_downloads
        working-directory: ${{ env.SRC_DIR }}
        run: |
          Invoke-WebRequest -Uri "https://github.com/Asher-1/cloudViewer_downloads/releases/download/1.9.4/3rdparty_downloads.zip" -OutFile "3rdparty_downloads.zip"
          Expand-Archive "3rdparty_downloads.zip" "${{ env.SRC_DIR }}" -Force && Remove-Item "3rdparty_downloads.zip"

      - name: Config and Building
        run: |
          # no need to test due to to next step is test-wheel
          $env:IGNORE_TEST = "ON"
          echo "IGNORE_TEST=$env:IGNORE_TEST"  | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          scripts/build_win_wheel.ps1 "${{ matrix.python_version }}" "${{ env.INSTALL_DIR }}" "${{ env.CLOUDVIEWER_ML_ROOT }}"

          $PIP_PKG_NAME=(Get-ChildItem (Join-Path "${{ env.INSTALL_DIR }}" "cloudViewer-*.whl")).Name
          $PIP_CPU_PKG_NAME=(Get-ChildItem (Join-Path "${{ env.INSTALL_DIR }}" "cloudViewer_cpu*.whl")).Name
          echo "PIP_PKG_NAME=$PIP_PKG_NAME"  | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "PIP_CPU_PKG_NAME=$PIP_CPU_PKG_NAME"  | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Upload Wheel to GitHub artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PIP_PKG_NAME }}
          path: |
            ${{ env.INSTALL_DIR }}/${{ env.PIP_PKG_NAME }}
            ${{ env.INSTALL_DIR }}/${{ env.PIP_CPU_PKG_NAME }}
          if-no-files-found: error
      
      - name: Update devel release
        if: ${{ github.ref == 'refs/heads/main' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload main-devel ${{ env.INSTALL_DIR }}/${{ env.PIP_PKG_NAME }} ${{ env.INSTALL_DIR }}/${{ env.PIP_CPU_PKG_NAME }} --clobber
          gh release view main-devel

      - name: Public Wheel Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          fail_on_unmatched_files: false
          generate_release_notes: false
          prerelease: false
          files: |
            ${{ env.INSTALL_DIR }}/${{ env.PIP_PKG_NAME }}
            ${{ env.INSTALL_DIR }}/${{ env.PIP_CPU_PKG_NAME }}

  test-wheel:
    name: Test wheel(CPU)
    permissions:
      contents: read
    runs-on: windows-2022
    needs: [build-wheel]
    strategy:
      fail-fast: false
      matrix:
        python_version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        is_main:
          - ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v') }}
        exclude:
          - is_main: false
            python_version: '3.8'
          - is_main: false
            python_version: '3.9'
          - is_main: false
            python_version: '3.10'
          - is_main: false
            python_version: '3.11'

    env:
      BUILD_CUDA_MODULE: ON
      BUILD_TORCH_OPS: ON
      # TensorFlow v2.16 does not support Python 3.8
      BUILD_TENSORFLOW_OPS: OFF
      CONDA_DEP_FILE: ".ci/conda_windows.yml"
      CLOUDVIEWER_ML_ROOT: ${{ github.workspace }}/CloudViewer-ML

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Checkout CloudViewer-ML source code
        uses: actions/checkout@v4
        with:
          repository: Asher-1/CloudViewer-ML
          ref: main
          path: ${{ env.CLOUDVIEWER_ML_ROOT }}

      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          pattern: cloudViewer*win*.whl
          merge-multiple: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python_version }}

      - name: Test Python package
        run: |
          $ErrorActionPreference = 'Stop'
          python -V
          python -m venv cloudViewer_test_venv
          cloudViewer_test_venv\Scripts\Activate.ps1

          python -m pip install --upgrade pip==${{ env.PIP_VER }} `
            wheel==${{ env.WHEEL_VER }} `
            setuptools==${{ env.STOOLS_VER }}
          python -m pip install -U -r python/requirements_test.txt
          $py_tag=(python -c "import sys; print(f'cp{sys.version_info.major}{sys.version_info.minor}')")
          if (Test-Path -Path "pip_package") {
            $PIP_PKG_NAME=(Get-ChildItem pip_package\cloudViewer_cpu*-$py_tag-*.whl).Name
          } else {
            $PIP_PKG_NAME=(Get-ChildItem cloudViewer_cpu*-$py_tag-*.whl).Name
          }
          echo "Installing ACloudViewer wheel $PIP_PKG_NAME in virtual environment..."
          python -m pip install "$PIP_PKG_NAME"
          python -c "import cloudViewer; print('Imported:', cloudViewer)"
          python -c "import cloudViewer; print('CUDA enabled: ', cloudViewer.core.cuda.is_available())"
          deactivate

      # - name: Run Python unit tests
      #   run: |
      #     $ErrorActionPreference = 'Stop'
      #     cloudViewer_test_venv\Scripts\Activate.ps1
      #     echo "Running ACloudViewer python tests..."
      #     echo "Add --randomly-seed=SEED to the test command to reproduce test order."
      #     echo "Testing ML and ML Ops disabled"
      #     python -m pytest python/test/ --ignore python/test/ml_ops/
      #     deactivate
