name: MacOS
permissions: {}

on:
  workflow_dispatch:
    inputs:
      developer_build:
        description: 'Set to OFF for Release builds.'
        required: false
        default: 'ON'

  push:
    branches:
      - main
  pull_request:
    types: [opened, reopened, synchronize]  # Rebuild on new pushes to PR

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  # https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources
  NPROC: 4
  DEVELOPER_BUILD: ${{ github.event.inputs.developer_build || 'ON' }}

jobs:
  MacOS:
    permissions:
      contents: write  # upload
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # macos-12 is Intel runner, macos-14 is Apple Silicon
        # https://github.com/actions/runner-images
        os: [macos-12, macos-14]
        CONFIG: [ON, OFF]
    env:
      BUILD_SHARED_LIBS: ${{ matrix.CONFIG }}
      BUILD_CUDA_MODULE: OFF
      BUILD_TENSORFLOW_OPS: ${{ matrix.CONFIG }}
      BUILD_PYTORCH_OPS: ${{ matrix.CONFIG }}
      LOW_MEM_USAGE: ON
      CONDA_DEP_FILE_CLOUDVIEWER: ".ci/conda_macos_cloudViewer.yml"
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Setup cache
        uses: actions/cache@v4
        with:
          # Ref: https://github.com/apache/incubator-mxnet/pull/18459/files
          path: ~/.ccache
          # We include the commit sha in the cache key, as new cache entries are
          # only created if there is no existing entry for the key yet.
          key: ${{ runner.os }}-${{ runner.arch }}-ccache-${{ github.sha }}
          # Restore any ccache cache entry, if none for
          # ${{ runner.os }}-${{ runner.arch }}-ccache-${{ github.sha }} exists.
          # Common prefix will be used so that ccache can be used across commits.
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-ccache

      # DGM: without caching, using conda on Windows takes a long time...
      - name: Set up Python version
        uses: conda-incubator/setup-miniconda@v3
        with:
          architecture: ${{ matrix.os == 'macos-14' && 'arm64' || 'x64' }}
          activate-environment: cloudViewer
          auto-activate-base: false
          environment-file: ${{ env.CONDA_DEP_FILE_CLOUDVIEWER }}
      
      - name: Install dependencies
        run: |
          brew install ccache pkg-config

          if [[ ${{ runner.arch}} == "ARM64"  ]]; then
            # Fix gfortran not found issue
            ln -s $(which gfortran-13) /usr/local/bin/gfortran

            # Default macos-14 image Xcode (version 15.0.1) linker causes build issues.
            # Newer Xcode versions work, but embree recommends Apple clang <= 14 on
            # arm64 to avoid possible "EXEC_BAD_INSTRUCTION" runtime exceptions:
            # https://github.com/embree/embree/releases/tag/v4.3.1
            sudo xcode-select -switch /Applications/Xcode_14.3.1.app
          fi

          # Install libomp 11.1.0 from old brew bottle for x64 catalina (10.15)
          # / arm64 big sur (11.0). Directly installing the Ruby formula will
          # install for the current OS.
          # https://github.com/microsoft/LightGBM/issues/4229
          if [[ ${{ runner.arch}} == "X64"  ]]; then
            brew unlink libomp
            # x64 catalina (10.15) bottle
            export LIBOMP_BOTTLE_HASH=45a5aa653bd45bd5ff5858580b1a4670c4b5a51ea29d68d45a53f72f56010e05
          else # ARM64
            # arm64 big_sur (11.0) bottle
            export LIBOMP_BOTTLE_HASH=f87f7841eb8b72650fa771af39642361aec371ea1a1f94f081ecc0e8168a0e75
          fi
          curl -L -H "Authorization: Bearer QQ==" -o libomp-11.1.0.bottle.tar.gz \
          https://ghcr.io/v2/homebrew/core/libomp/blobs/sha256:$LIBOMP_BOTTLE_HASH
          brew install -f libomp-11.1.0.bottle.tar.gz

          wget https://raw.githubusercontent.com/Asher-1/CloudViewerUpdate/main/tools/QtIFW-4.8.0-darwin.zip -O "~/QtIFW-4.8.0-darwin.zip"
          unzip ~/QtIFW-4.8.0-darwin.zip ~/ && rm ~/QtIFW-4.8.0-darwin.zip
          export PATH="~/QtIFW-4.8.0-darwin/bin:$PATH"

          ccache -M 2G  # See .github/workflows/readme.md for ccache strategy.
      - name: Config and build
        run: |
          CLOUDVIEWER_VERSION_FULL="$(grep -F CLOUDVIEWER_VERSION_FULL build/CMakeCache.txt | cut -f2 -d'=')"
          PATH=/usr/local/var/homebrew/linked/ccache/libexec:$PATH
          ccache -s
          ./util/run_ci.sh
          DEVEL_PKG_NAME="$(basename ~/cloudViewer_install/ACloudViewer-${CLOUDVIEWER_VERSION_FULL}*.dmg)"
          echo "DEVEL_PKG_NAME=$DEVEL_PKG_NAME" >> $GITHUB_ENV

      - name: Upload ACloudViewer app
        uses: actions/upload-artifact@v4
        if: ${{ env.BUILD_SHARED_LIBS == 'OFF' }}
        with:
          name: ACloudViewer-app-macosx-10_15-${{ runner.arch}}
          path: ~/cloudViewer_install/${{ env.DEVEL_PKG_NAME }}
          if-no-files-found: error

  # fuse-viewer:
  #   permissions:
  #     contents: write  # Release upload
  #   name: Fuse x64 and ARM64 ACloudViewer app
  #   runs-on: [macos-12]
  #   needs: [MacOS]
  #   steps:
  #     - name: Checkout source code  # for gh release upload
  #       uses: actions/checkout@v4
  #     - name: Download viewer apps
  #       uses: actions/download-artifact@v4
  #       with:
  #         pattern: ACloudViewer-*mac-*
  #         merge-multiple: true

  #     - name: Fuse x64 and arm64 ACloudViewer apps
  #       run: |
  #         unzip ACloudViewer-*-X64.dmg -d x64
  #         unzip ACloudViewer-*-ARM64.dmg -d arm64
  #         APP_NAME=$(ls ACloudViewer-*-X64.dmg)
  #         APP_NAME=${APP_NAME/-X64/-universal2}  # includes version
  #         for i in arm64/ACloudViewer.app/Contents/MacOS/*; do
  #           filepath=ACloudViewer.app/Contents/MacOS/$(basename $i)
  #           lipo -create arm64/${filepath} x64/${filepath} -output arm64/${filepath}
  #         done
  #         mv arm64/ACloudViewer.app ACloudViewer.app
  #         zip -rv "${APP_NAME}" ACloudViewer.app

  #     - name: Upload ACloudViewer app
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: ACloudViewer-app-macosx-10_15-universal2
  #         path: ACloudViewer-*-universal2.zip
  #         if-no-files-found: error

  build-wheel:
    name: Build wheel
    permissions:
      contents: write  # upload
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      # https://github.community/t/how-to-conditionally-include-exclude-items-in-matrix-eg-based-on-branch/16853/6
      matrix:
        # macos-12 is Intel runner, macos-14 is Apple Silicon
        # https://github.com/actions/runner-images
        os: [macos-12, macos-14]
        python_version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        is_main:
          - ${{ github.ref == 'refs/heads/main' }}
        exclude:
          # TODO: remove macos-14 excludes when https://github.com/actions/setup-python/issues/808 is fixed
          - os: macos-14
            python_version: '3.8'
          - os: macos-14
            python_version: '3.9'
          - is_main: false
            python_version: '3.8'
          - is_main: false
            python_version: '3.9'
          - is_main: false
            python_version: '3.10'
          - is_main: false
            python_version: '3.11'

    env:
      CONDA_DEP_FILE: ".ci/conda_macos.yml"
      BUILD_CUDA_MODULE: OFF
      # TensorFlow v2.16 does not support Python 3.8
      BUILD_TENSORFLOW_OPS: ${{ matrix.python_version == '3.8' && 'OFF' || 'ON' }}
      CLOUDVIEWER_ML_ROOT: ${{ github.workspace }}/CloudViewer-ML
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Checkout CloudViewer-ML source code
        uses: actions/checkout@v4
        with:
          repository: Asher-1/CloudViewer-ML
          path: ${{ env.CLOUDVIEWER_ML_ROOT }}

      - name: Setup cache
        uses: actions/cache@v4
        with:
          # Ref: https://github.com/apache/incubator-mxnet/pull/18459/files
          path: ~/.ccache
          # We include the commit sha in the cache key, as new cache entries are
          # only created if there is no existing entry for the key yet.
          key: ${{ runner.os }}-${{ runner.arch }}-ccache-${{ github.sha }}
          # Restore any ccache cache entry, if none for
          # ${{ runner.os }}-${{ runner.arch }}-ccache-${{ github.sha }} exists.
          # Common prefix will be used so that ccache can be used across commits.
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-ccache

      - name: Set up Python version
        run: |
          sed -i "" "s/3.8/${{ matrix.python_version }}/g" ${{ env.CONDA_DEP_FILE }}

      # DGM: without caching, using conda on Windows takes a long time...
      - name: Set up Python environment
        uses: conda-incubator/setup-miniconda@v3
        with:
          architecture: ${{ matrix.os == 'macos-14' && 'arm64' || 'x64' }}
          activate-environment: python${{ matrix.python_version }}
          auto-activate-base: false
          environment-file: ${{ env.CONDA_DEP_FILE }}

      - name: Install dependencies
        run: |
          echo "Using python: $(which python)"
          python --version
          echo -n "Using pip: $(which pip)"
          python -m pip --version
          echo "Using cmake: $(which cmake)"
          cmake --version

          export CONDA_PREFIX="/root/miniconda3/envs/python${{ matrix.python_version }}"
          source util/ci_utils.sh
          install_python_dependencies

          # Fix macos-14 arm64 runner image issues, see comments in MacOS job.
          if [[ ${{ runner.arch}} == "ARM64"  ]]; then
            ln -s $(which gfortran-13) /usr/local/bin/gfortran
            sudo xcode-select -switch /Applications/Xcode_14.3.1.app
          fi

          # Install libomp 11.1.0. See comment above.
          if [[ ${{ runner.arch}} == "X64"  ]]; then
            brew unlink libomp
            # x64 catalina (10.15) bottle
            export LIBOMP_BOTTLE_HASH=45a5aa653bd45bd5ff5858580b1a4670c4b5a51ea29d68d45a53f72f56010e05
          else # ARM64
            # arm64 big_sur (11.0) bottle
            export LIBOMP_BOTTLE_HASH=f87f7841eb8b72650fa771af39642361aec371ea1a1f94f081ecc0e8168a0e75
          fi
          curl -L -H "Authorization: Bearer QQ==" -o libomp-11.1.0.bottle.tar.gz \
          https://ghcr.io/v2/homebrew/core/libomp/blobs/sha256:$LIBOMP_BOTTLE_HASH
          brew install -f libomp-11.1.0.bottle.tar.gz
          brew install ccache
          ccache -M 2G  # See .github/workflows/readme.md for ccache strategy.

      - name: Config and build wheel
        run: |
          PATH=/usr/local/var/homebrew/linked/ccache/libexec:$PATH
          ccache -s
          source util/ci_utils.sh
          build_pip_package with_conda build_realsense
          ccache -s
          PIP_PKG_NAME="$(basename build/lib/python_package/pip_package/cloudViewer*.whl)"
          echo "PIP_PKG_NAME=$PIP_PKG_NAME" >> $GITHUB_ENV

      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PIP_PKG_NAME }}
          path: build/lib/python_package/pip_package/${{ env.PIP_PKG_NAME }}
          if-no-files-found: error

  fuse-wheel:
    name: Fuse universal2 wheel
    permissions:
      contents: write  # Release upload
    runs-on: [macos-12]
    needs: [build-wheel]
    strategy:
      fail-fast: false
      # https://github.community/t/how-to-conditionally-include-exclude-items-in-matrix-eg-based-on-branch/16853/6
      matrix:
        python_version: ['3.10', '3.11', '3.12']
        is_main:
          - ${{ github.ref == 'refs/heads/main' }}
        exclude:
          - is_main: false
            python_version: '3.10'
          - is_main: false
            python_version: '3.11'
    steps:
      - name: Checkout source code  # for gh release upload
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python_version }}

      - name: Download X64 wheels
        uses: actions/download-artifact@v4
        with:
          pattern: cloudViewer-*macosx*_x86_64.whl
          path: x64_wheels
          merge-multiple: true

      - name: Download ARM64 wheels
        uses: actions/download-artifact@v4
        with:
          pattern: cloudViewer-*macosx*_arm64.whl
          path: arm64_wheels
          merge-multiple: true

      - name: Fuse x64 and ARM64 wheels
        env:
          python_version: ${{ matrix.python_version }}
        run: |
          PYTAG="-cp$(echo ${{ env.python_version }} | tr -d '.')"
          mkdir universal_wheels
          pip install delocate
          delocate-merge -v -w universal_wheels x64_wheels/cloudViewer-*${PYTAG}*.whl arm64_wheels/cloudViewer-*${PYTAG}*.whl
          NEW_WHL_NAME=$(basename universal_wheels/cloudViewer-*${PYTAG}*.whl)
          echo "PIP_PKG_NAME=$NEW_WHL_NAME" >> $GITHUB_ENV

      - name: Upload merged wheels
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PIP_PKG_NAME }}
          path: universal_wheels/${{ env.PIP_PKG_NAME }}
          if-no-files-found: error

  test-wheel:
    name: Test wheel
    permissions:
      contents: read
    runs-on: ${{ matrix.os }}
    needs: [build-wheel]
    strategy:
      fail-fast: false
      matrix:
        os: [macos-12, macos-14]
        python_version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        is_main:
          - ${{ github.ref == 'refs/heads/main' }}
        exclude:
          - os: macos-14
            python_version: '3.8'
          - os: macos-14
            python_version: '3.9'
          - is_main: false
            python_version: '3.8'
          - is_main: false
            python_version: '3.9'
          - is_main: false
            python_version: '3.10'
          - is_main: false
            python_version: '3.11'

    env:
      CLOUDVIEWER_ML_ROOT: ${{ github.workspace }}/CloudViewer-ML
      CONDA_DEP_FILE: ".ci/conda_macos.yml"
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Checkout CloudViewer-ML source code
        uses: actions/checkout@v4
        with:
          repository: Asher-1/CloudViewer-ML
          ref: main
          path: ${{ env.CLOUDVIEWER_ML_ROOT }}

      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          pattern: cloudViewer-*macosx*.whl
          merge-multiple: true

      - name: Set up Python version
        run: |
          sed -i "" "s/3.8/${{ matrix.python_version }}/g" ${{ env.CONDA_DEP_FILE }}

      # DGM: without caching, using conda on Windows takes a long time...
      - name: Set up Python environment
        uses: conda-incubator/setup-miniconda@v3
        with:
          architecture: ${{ matrix.os == 'macos-14' && 'arm64' || 'x64' }}
          activate-environment: python${{ matrix.python_version }}
          auto-activate-base: false
          environment-file: ${{ env.CONDA_DEP_FILE }}
          
      - name: Test Python package
        run: |
          python -V
          source util/ci_utils.sh
          pi_tag=$(python -c "import sys; print(f'cp{sys.version_info.major}{sys.version_info.minor}')")
          test_wheel cloudViewer*-"$pi_tag"-*_$(uname -m).whl

      # - name: Run Python unit tests
      #   run: |
      #     source util/ci_utils.sh
      #     echo "Running CloudViewer python tests..."
      #     run_python_tests
