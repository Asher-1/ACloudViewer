name: MacOS
permissions: {}

on:
  workflow_dispatch:
    inputs:
      developer_build:
        description: 'Set to OFF for Release builds.'
        required: false
        default: 'ON'

  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
  pull_request:
    types: [opened, reopened, synchronize]  # Rebuild on new pushes to PR

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  # https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources
  NPROC: 4
  DEVELOPER_BUILD: ${{ github.event.inputs.developer_build || 'ON' }}

jobs:
  MacOS:
    permissions:
      contents: write  # upload
      actions: write   # release
    runs-on: ${{ matrix.os }}
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    strategy:
      fail-fast: false
      matrix:
        # macos-13 is Intel runner, macos-14 is Apple Silicon
        # https://github.com/actions/runner-images
        os: [macos-13, macos-14]
        python_version: ['3.11']
    env:
      BUILD_SHARED_LIBS: OFF
      BUILD_CUDA_MODULE: OFF
      BUILD_TENSORFLOW_OPS: OFF
      BUILD_PYTORCH_OPS: OFF
      LOW_MEM_USAGE: ON
      CONDA_DEP_FILE_CLOUDVIEWER: ".ci/conda_macos_cloudViewer.yml"
      INSTALL_DIR: "${{ env.HOME }}/cloudViewer_install"
    steps:
      - name: Setup DEVELOPER_BUILD
        run: |
          if [[ "${GITHUB_EVENT_NAME}" == "push" && "${GITHUB_REF}" == refs/tags/v* ]]; then
            echo "DEVELOPER_BUILD=OFF" >> $GITHUB_ENV
          else
            echo "DEVELOPER_BUILD=${{ github.event.inputs.developer_build || 'ON' }}" >> $GITHUB_ENV
          fi
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Setup cache
        uses: actions/cache@v4
        with:
          # Ref: https://github.com/apache/incubator-mxnet/pull/18459/files
          path: ~/.ccache
          # We include the commit sha in the cache key, as new cache entries are
          # only created if there is no existing entry for the key yet.
          key: ${{ runner.os }}-${{ runner.arch }}-ccache-${{ github.sha }}
          # Restore any ccache cache entry, if none for
          # ${{ runner.os }}-${{ runner.arch }}-ccache-${{ github.sha }} exists.
          # Common prefix will be used so that ccache can be used across commits.
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-ccache

      - name: Set up Python version
        run: |
          sed -i "" "s/3.8/${{ matrix.python_version }}/g" ${{ env.CONDA_DEP_FILE_CLOUDVIEWER }}

      # DGM: without caching, using conda on Windows takes a long time...
      - name: Set up Python version
        uses: conda-incubator/setup-miniconda@v3
        with:
          activate-environment: cloudViewer
          auto-activate-base: false
          environment-file: ${{ env.CONDA_DEP_FILE_CLOUDVIEWER }}
      
      - name: Install dependencies
        run: |
          brew install ccache

          # Fix gfortran not found issue
          ln -s $(which gfortran-13) /usr/local/bin/gfortran

          # Install libomp 11.1.0 from old brew bottle for x64 catalina (10.15)
          # / arm64 big sur (11.0). Directly installing the Ruby formula will
          # install for the current OS.
          # https://github.com/microsoft/LightGBM/issues/4229
          if [[ ${{ runner.arch}} == "X64"  ]]; then
            # brew unlink libomp
            # x64 catalina (10.15) bottle
            export LIBOMP_BOTTLE_HASH=45a5aa653bd45bd5ff5858580b1a4670c4b5a51ea29d68d45a53f72f56010e05
          else # ARM64
            # arm64 big_sur (11.0) bottle
            export LIBOMP_BOTTLE_HASH=f87f7841eb8b72650fa771af39642361aec371ea1a1f94f081ecc0e8168a0e75
          fi
          curl -L -H "Authorization: Bearer QQ==" -o libomp-11.1.0.bottle.tar.gz \
          https://ghcr.io/v2/homebrew/core/libomp/blobs/sha256:$LIBOMP_BOTTLE_HASH
          brew install -f libomp-11.1.0.bottle.tar.gz

          curl -L "https://raw.githubusercontent.com/Asher-1/CloudViewerUpdate/main/tools/QtIFW-4.6.1-darwin.zip" -o ~/QtIFW-4.6.1-darwin.zip
          unzip -q ~/QtIFW-4.6.1-darwin.zip -d ~/
          rm ~/QtIFW-4.6.1-darwin.zip
          ls -hal ~/QtIFW-4.6.1-darwin/bin

          ccache -M 2G  # See .github/workflows/readme.md for ccache strategy.
      - name: Config and build
        shell: bash -l {0}
        run: |
          if [[ ${{ runner.arch}} == "ARM64"  ]]; then
            brew install libomp
            brew info libomp
            export LDFLAGS="-L/opt/homebrew/opt/libomp/lib"
            export CPPFLAGS="-I/opt/homebrew/opt/libomp/include"
            echo "LDFLAGS: $LDFLAGS"
            echo "CPPFLAGS: $CPPFLAGS"
            ls -l /opt/homebrew/opt/libomp/include
            ls -l /opt/homebrew/opt/libomp/lib

            echo "LDFLAGS=-L/opt/homebrew/opt/libomp/lib" >> $GITHUB_ENV
            echo "CPPFLAGS=-I/opt/homebrew/opt/libomp/include" >> $GITHUB_ENV
            echo "OpenMP_ROOT=/opt/homebrew/opt/libomp" >> $GITHUB_ENV
          else
            brew install libomp
            brew info libomp
            export LDFLAGS="-L/usr/local/opt/libomp/lib"
            export CPPFLAGS="-I/usr/local/opt/libomp/include"
            echo "LDFLAGS: $LDFLAGS"
            echo "CPPFLAGS: $CPPFLAGS"
            ls -l /usr/local/opt/libomp/include
            ls -l /usr/local/opt/libomp/lib

            echo "LDFLAGS=-L/usr/local/opt/libomp/lib" >> $GITHUB_ENV
            echo "CPPFLAGS=-I/usr/local/opt/libomp/include" >> $GITHUB_ENV
            echo "OpenMP_ROOT=/usr/local/opt/libomp" >> $GITHUB_ENV
          fi

          export PATH=${HOME}/QtIFW-4.6.1-darwin/bin:$PATH
          export PATH=/usr/local/var/homebrew/linked/ccache/libexec:$PATH
          export PKG_CONFIG_PATH=$CONDA_PREFIX/lib/pkgconfig:$PKG_CONFIG_PATH
          export PATH=$CONDA_PREFIX/lib:$CONDA_PREFIX/lib/pkgconfig:$CONDA_PREFIX/lib/cmake:$PATH
          echo "PATH=$PATH" >> $GITHUB_ENV

          echo "DEVELOPER_BUILD is ${{ env.DEVELOPER_BUILD }}"
          echo "INSTALL_DIR is ${{ env.INSTALL_DIR }}"

          ccache -s
          ./util/run_ci.sh
          CLOUDVIEWER_VERSION_FULL="$(grep -F CLOUDVIEWER_VERSION_FULL build/CMakeCache.txt | cut -f2 -d'=')"
          DEVEL_PKG_NAME="$(basename ${{ env.INSTALL_DIR }}/ACloudViewer-${CLOUDVIEWER_VERSION_FULL}*.dmg)"
          echo "DEVEL_PKG_NAME=$DEVEL_PKG_NAME" >> $GITHUB_ENV

      - name: Upload ACloudViewer app to GitHub artifacts
        uses: actions/upload-artifact@v4
        if: ${{ env.BUILD_SHARED_LIBS == 'OFF' }}
        with:
          name: ACloudViewer-app-macosx-${{ runner.arch}}
          path: |
            ${{ env.INSTALL_DIR }}/${{ env.DEVEL_PKG_NAME }}
          if-no-files-found: error
        
      - name: Update devel release
        if: ${{ github.ref == 'refs/heads/main' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload main-devel ${{ env.INSTALL_DIR }}/${{ env.DEVEL_PKG_NAME }} --clobber
          gh release view main-devel

      - name: Public App Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          fail_on_unmatched_files: false
          generate_release_notes: false
          prerelease: false
          # body_path: ${{github.workspace}}/CHANGELOG.md
          files: |
            ${{ env.INSTALL_DIR }}/${{ env.DEVEL_PKG_NAME }}

  build-wheel:
    name: Build wheel
    permissions:
      contents: write  # upload
      actions: write   # release
    runs-on: ${{ matrix.os }}
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    strategy:
      fail-fast: false
      # https://github.community/t/how-to-conditionally-include-exclude-items-in-matrix-eg-based-on-branch/16853/6
      matrix:
        # macos-13 is Intel runner, macos-14 is Apple Silicon
        # https://github.com/actions/runner-images
        os: [macos-13, macos-14]
        python_version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        is_main:
          - ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v') }}
        exclude:
          - is_main: false
            python_version: '3.8'
          - is_main: false
            python_version: '3.9'
          - is_main: false
            python_version: '3.10'
          - is_main: false
            python_version: '3.11'

    env:
      CONDA_DEP_FILE: ".ci/conda_macos.yml"
      BUILD_CUDA_MODULE: OFF
      BUILD_TORCH_OPS: ON
      # TensorFlow v2.16 does not support Python 3.8
      BUILD_TENSORFLOW_OPS: OFF
      CLOUDVIEWER_ML_ROOT: ${{ github.workspace }}/CloudViewer-ML
    steps:
      - name: Setup DEVELOPER_BUILD
        run: |
          if [[ "${GITHUB_EVENT_NAME}" == "push" && "${GITHUB_REF}" == refs/tags/v* ]]; then
            echo "DEVELOPER_BUILD=OFF" >> $GITHUB_ENV
          else
            echo "DEVELOPER_BUILD=${{ github.event.inputs.developer_build || 'ON' }}" >> $GITHUB_ENV
          fi

      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Checkout CloudViewer-ML source code
        uses: actions/checkout@v4
        with:
          repository: Asher-1/CloudViewer-ML
          path: ${{ env.CLOUDVIEWER_ML_ROOT }}

      - name: Setup cache
        uses: actions/cache@v4
        with:
          # Ref: https://github.com/apache/incubator-mxnet/pull/18459/files
          path: ~/.ccache
          # We include the commit sha in the cache key, as new cache entries are
          # only created if there is no existing entry for the key yet.
          key: ${{ runner.os }}-${{ runner.arch }}-ccache-${{ github.sha }}
          # Restore any ccache cache entry, if none for
          # ${{ runner.os }}-${{ runner.arch }}-ccache-${{ github.sha }} exists.
          # Common prefix will be used so that ccache can be used across commits.
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-ccache

      - name: Set up Python version
        run: |
          sed -i "" "s/3.8/${{ matrix.python_version }}/g" ${{ env.CONDA_DEP_FILE }}

      - name: Set up Python environment
        uses: conda-incubator/setup-miniconda@v3
        with:
          activate-environment: python${{ matrix.python_version }}
          auto-activate-base: false
          environment-file: ${{ env.CONDA_DEP_FILE }}

      - name: Install python dependencies
        shell: bash -l {0}
        run: |
          echo "Using python: $(which python)"
          python --version
          echo -n "Using pip: $(which pip)"
          python -m pip --version
          echo "Using cmake: $(which cmake)"
          cmake --version
          source util/ci_utils.sh
          install_python_dependencies

      - name: Install dependencies
        run: |
          # Fix macos-14 arm64 runner image issues, see comments in MacOS job.
          ln -s $(which gfortran-13) /usr/local/bin/gfortran

          # Install libomp 11.1.0. See comment above.
          if [[ ${{ runner.arch}} == "X64"  ]]; then
            # brew unlink libomp
            # x64 catalina (10.15) bottle
            export LIBOMP_BOTTLE_HASH=45a5aa653bd45bd5ff5858580b1a4670c4b5a51ea29d68d45a53f72f56010e05
          else # ARM64
            # arm64 big_sur (11.0) bottle
            export LIBOMP_BOTTLE_HASH=f87f7841eb8b72650fa771af39642361aec371ea1a1f94f081ecc0e8168a0e75
          fi
          curl -L -H "Authorization: Bearer QQ==" -o libomp-11.1.0.bottle.tar.gz \
          https://ghcr.io/v2/homebrew/core/libomp/blobs/sha256:$LIBOMP_BOTTLE_HASH
          brew install -f libomp-11.1.0.bottle.tar.gz
          brew install ccache
          ccache -M 2G  # See .github/workflows/readme.md for ccache strategy.

      - name: Config and build wheel
        shell: bash -l {0}
        run: |
          if [[ ${{ runner.arch}} == "ARM64"  ]]; then
            brew install libomp
            brew info libomp
            export LDFLAGS="-L/opt/homebrew/opt/libomp/lib"
            export CPPFLAGS="-I/opt/homebrew/opt/libomp/include"
            echo "LDFLAGS: $LDFLAGS"
            echo "CPPFLAGS: $CPPFLAGS"
            ls -l /opt/homebrew/opt/libomp/include
            ls -l /opt/homebrew/opt/libomp/lib

            echo "LDFLAGS=-L/opt/homebrew/opt/libomp/lib" >> $GITHUB_ENV
            echo "CPPFLAGS=-I/opt/homebrew/opt/libomp/include" >> $GITHUB_ENV
            echo "OpenMP_ROOT=/opt/homebrew/opt/libomp" >> $GITHUB_ENV
          else
            brew install libomp
            brew info libomp
            export LDFLAGS="-L/usr/local/opt/libomp/lib"
            export CPPFLAGS="-I/usr/local/opt/libomp/include"
            echo "LDFLAGS: $LDFLAGS"
            echo "CPPFLAGS: $CPPFLAGS"
            ls -l /usr/local/opt/libomp/include
            ls -l /usr/local/opt/libomp/lib

            echo "LDFLAGS=-L/usr/local/opt/libomp/lib" >> $GITHUB_ENV
            echo "CPPFLAGS=-I/usr/local/opt/libomp/include" >> $GITHUB_ENV
            echo "OpenMP_ROOT=/usr/local/opt/libomp" >> $GITHUB_ENV
          fi

          export PATH=/usr/local/var/homebrew/linked/ccache/libexec:$PATH
          export PKG_CONFIG_PATH=$CONDA_PREFIX/lib/pkgconfig:$PKG_CONFIG_PATH
          export PATH=$CONDA_PREFIX/lib:$CONDA_PREFIX/lib/pkgconfig:$CONDA_PREFIX/lib/cmake:$PATH
          echo "PATH=$PATH" >> $GITHUB_ENV

          echo "DEVELOPER_BUILD is ${{ env.DEVELOPER_BUILD }}"

          ccache -s
          source util/ci_utils.sh
          build_mac_wheel with_conda build_realsense
          ccache -s
          PIP_PKG_NAME="$(basename build/lib/python_package/pip_package/cloudViewer*.whl)"
          echo "PIP_PKG_NAME=$PIP_PKG_NAME" >> $GITHUB_ENV

      - name: Upload Wheel to GitHub artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PIP_PKG_NAME }}
          path: build/lib/python_package/pip_package/${{ env.PIP_PKG_NAME }}
          if-no-files-found: error
       
      - name: Update devel release
        if: ${{ github.ref == 'refs/heads/main' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload main-devel build/lib/python_package/pip_package/${{ env.PIP_PKG_NAME }} --clobber
          gh release view main-devel

      - name: Public Wheel Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          fail_on_unmatched_files: false
          generate_release_notes: false
          prerelease: false
          # body_path: ${{github.workspace}}/CHANGELOG.md
          files: |
            build/lib/python_package/pip_package/${{ env.PIP_PKG_NAME }}

  fuse-wheel:
    name: Fuse universal2 wheel
    permissions:
      contents: write  # upload
      actions: write   # release
    runs-on: [macos-13]
    needs: [build-wheel]
    strategy:
      fail-fast: false
      # https://github.community/t/how-to-conditionally-include-exclude-items-in-matrix-eg-based-on-branch/16853/6
      matrix:
        python_version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        is_main:
          - ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v') }}
        exclude:
          - is_main: false
            python_version: '3.8'
          - is_main: false
            python_version: '3.9'
          - is_main: false
            python_version: '3.10'
          - is_main: false
            python_version: '3.11'
    steps:
      - name: Checkout source code # for gh release upload
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python_version }}

      - name: Download X64 wheels
        uses: actions/download-artifact@v4
        with:
          pattern: cloudViewer-*macosx*_x86_64.whl
          path: x64_wheels
          merge-multiple: true

      - name: Download ARM64 wheels
        uses: actions/download-artifact@v4
        with:
          pattern: cloudViewer-*macosx*_arm64.whl
          path: arm64_wheels
          merge-multiple: true

      - name: Fuse x64 and ARM64 wheels
        env:
          python_version: ${{ matrix.python_version }}
        run: |
          PYTAG="-cp$(echo ${{ env.python_version }} | tr -d '.')"
          mkdir universal_wheels
          pip install delocate
          delocate-merge -v -w universal_wheels x64_wheels/cloudViewer-*${PYTAG}*.whl arm64_wheels/cloudViewer-*${PYTAG}*.whl
          NEW_WHL_NAME=$(basename universal_wheels/cloudViewer-*${PYTAG}*.whl)
          echo "PIP_PKG_NAME=$NEW_WHL_NAME" >> $GITHUB_ENV

      - name: Upload merged wheels to GitHub artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PIP_PKG_NAME }}
          path: universal_wheels/${{ env.PIP_PKG_NAME }}
          if-no-files-found: error
            
      - name: Update devel release
        if: ${{ github.ref == 'refs/heads/main' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload main-devel universal_wheels/${{ env.PIP_PKG_NAME }} --clobber
          gh release view main-devel

      - name: Public merged wheels Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          fail_on_unmatched_files: false
          generate_release_notes: false
          prerelease: false
          files: |
            universal_wheels/${{ env.PIP_PKG_NAME }}

  test-wheel:
    name: Test wheel
    permissions:
      contents: read
    runs-on: ${{ matrix.os }}
    needs: [build-wheel]
    strategy:
      fail-fast: false
      matrix:
        os: [macos-13, macos-14]
        python_version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        is_main:
          - ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v') }}
        exclude:
          - os: macos-14
            python_version: '3.8'
          - os: macos-14
            python_version: '3.9'
          - is_main: false
            python_version: '3.8'
          - is_main: false
            python_version: '3.9'
          - is_main: false
            python_version: '3.10'
          - is_main: false
            python_version: '3.11'

    env:
      BUILD_CUDA_MODULE: OFF
      BUILD_TORCH_OPS: ON
      # TensorFlow v2.16 does not support Python 3.8
      BUILD_TENSORFLOW_OPS: OFF
      CLOUDVIEWER_ML_ROOT: ${{ github.workspace }}/CloudViewer-ML
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Checkout CloudViewer-ML source code
        uses: actions/checkout@v4
        with:
          repository: Asher-1/CloudViewer-ML
          ref: main
          path: ${{ env.CLOUDVIEWER_ML_ROOT }}

      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          pattern: cloudViewer-*macosx*.whl
          merge-multiple: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python_version }}
      
      - name: Test Python package
        run: |
          python -V
          source util/ci_utils.sh
          pi_tag=$(python -c "import sys; print(f'cp{sys.version_info.major}{sys.version_info.minor}')")
          test_wheel cloudViewer*-"$pi_tag"-*_$(uname -m).whl

      # - name: Run Python unit tests
      #   run: |
      #     source util/ci_utils.sh
      #     echo "Running CloudViewer python tests..."
      #     run_python_tests
